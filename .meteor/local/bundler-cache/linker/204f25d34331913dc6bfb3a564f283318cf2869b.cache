[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\n\n/* Package-scope variables */\nvar correct, i, success, distractorsCorrect, Architect, level, Neuron, Layer, Network, Trainer;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/steeve_synaptic/packages/steeve_synaptic.js              //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {                                                       // 1\n                                                                     // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/steeve:synaptic/synaptic.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n                                                                                                                       // 2\nThe MIT License (MIT)                                                                                                  // 3\n                                                                                                                       // 4\nCopyright (c) 2014 Juan Cazala - juancazala.com                                                                        // 5\n                                                                                                                       // 6\nPermission is hereby granted, free of charge, to any person obtaining a copy                                           // 7\nof this software and associated documentation files (the \"Software\"), to deal                                          // 8\nin the Software without restriction, including without limitation the rights                                           // 9\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell                                              // 10\ncopies of the Software, and to permit persons to whom the Software is                                                  // 11\nfurnished to do so, subject to the following conditions:                                                               // 12\n                                                                                                                       // 13\nThe above copyright notice and this permission notice shall be included in                                             // 14\nall copies or substantial portions of the Software.                                                                    // 15\n                                                                                                                       // 16\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR                                             // 17\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,                                               // 18\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE                                            // 19\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER                                                 // 20\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,                                          // 21\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN                                              // 22\nTHE SOFTWARE                                                                                                           // 23\n                                                                                                                       // 24\n                                                                                                                       // 25\n                                                                                                                       // 26\n********************************************************************************************                           // 27\n                                         SYNAPTIC                                                                      // 28\n********************************************************************************************                           // 29\n                                                                                                                       // 30\nSynaptic is a javascript neural network library for node.js and the browser, its generalized                           // 31\nalgorythm is architecture-free, so you can build and train basically any type of first order                           // 32\nor even second order neural network architectures.                                                                     // 33\n                                                                                                                       // 34\nhttp://en.wikipedia.org/wiki/Recurrent_neural_network#Second_Order_Recurrent_Neural_Network                            // 35\n                                                                                                                       // 36\nThe library includes a few built-in architectures like multilayer perceptrons, multilayer                              // 37\nlong-short term memory networks (LSTM) or liquid state machines, and a trainer capable of                              // 38\ntraining any given network, and includes built-in training tasks/tests like solving an XOR,                            // 39\npassing a Distracted Sequence Recall test or an Embeded Reber Grammar test.                                            // 40\n                                                                                                                       // 41\nThe algorythm implemented by this library has been taken from Derek D. Monner's paper:                                 // 42\n                                                                                                                       // 43\nA generalized LSTM-like training algorithm for second-order recurrent neural networks                                  // 44\nhttp://www.overcomplete.net/papers/nn2012.pdf                                                                          // 45\n                                                                                                                       // 46\nThere are references to the equations in that paper commented through the source code.                                 // 47\n                                                                                                                       // 48\n                                                                                                                       // 49\n                                                                                                                       // 50\n********************************************************************************************                           // 51\n                                         NEURON                                                                        // 52\n*******************************************************************************************/                           // 53\n                                                                                                                       // 54\nfunction Neuron() {                                                                                                    // 55\n  this.ID = Neuron.uid();                                                                                              // 56\n  this.label = null;                                                                                                   // 57\n  this.connections = {                                                                                                 // 58\n    inputs: {},                                                                                                        // 59\n    projected: {},                                                                                                     // 60\n    gated: {}                                                                                                          // 61\n  };                                                                                                                   // 62\n  this.error = {                                                                                                       // 63\n    responsibility: 0,                                                                                                 // 64\n    projected: 0,                                                                                                      // 65\n    gated: 0                                                                                                           // 66\n  };                                                                                                                   // 67\n  this.trace = {                                                                                                       // 68\n    elegibility: {},                                                                                                   // 69\n    extended: {},                                                                                                      // 70\n    influences: {}                                                                                                     // 71\n  };                                                                                                                   // 72\n  this.state = 0;                                                                                                      // 73\n  this.old = 0;                                                                                                        // 74\n  this.activation = 0;                                                                                                 // 75\n  this.selfconnection = new Neuron.connection(this, this, 0); // weight = 0 -> not connected                           // 76\n  this.squash = Neuron.squash.LOGISTIC;                                                                                // 77\n  this.neighboors = {};                                                                                                // 78\n  this.bias = Math.random() * .2 - .1;                                                                                 // 79\n}                                                                                                                      // 80\n                                                                                                                       // 81\nNeuron.prototype = {                                                                                                   // 82\n                                                                                                                       // 83\n  // activate the neuron                                                                                               // 84\n  activate: function(input) {                                                                                          // 85\n    // activation from enviroment (for input neurons)                                                                  // 86\n    if (typeof input != 'undefined') {                                                                                 // 87\n      this.activation = input;                                                                                         // 88\n      this.derivative = 0;                                                                                             // 89\n      this.bias = 0;                                                                                                   // 90\n      return this.activation;                                                                                          // 91\n    }                                                                                                                  // 92\n                                                                                                                       // 93\n    // old state                                                                                                       // 94\n    this.old = this.state;                                                                                             // 95\n                                                                                                                       // 96\n    // eq. 15                                                                                                          // 97\n    this.state = this.selfconnection.gain * this.selfconnection.weight *                                               // 98\n      this.state + this.bias;                                                                                          // 99\n                                                                                                                       // 100\n    for (var i in this.connections.inputs) {                                                                           // 101\n      var input = this.connections.inputs[i];                                                                          // 102\n      this.state += input.from.activation * input.weight * input.gain;                                                 // 103\n    }                                                                                                                  // 104\n                                                                                                                       // 105\n    // eq. 16                                                                                                          // 106\n    this.activation = this.squash(this.state);                                                                         // 107\n                                                                                                                       // 108\n    // f'(s)                                                                                                           // 109\n    this.derivative = this.squash(this.state, true);                                                                   // 110\n                                                                                                                       // 111\n    // update traces                                                                                                   // 112\n    for (var i in this.connections.inputs) {                                                                           // 113\n      var input = this.connections.inputs[i];                                                                          // 114\n                                                                                                                       // 115\n      // elegibility trace - Eq. 17                                                                                    // 116\n      this.trace.elegibility[input.ID] = this.selfconnection.gain * this.selfconnection                                // 117\n        .weight * this.trace.elegibility[input.ID] + input.gain * input.from                                           // 118\n        .activation;                                                                                                   // 119\n                                                                                                                       // 120\n      for (var id in this.trace.extended) {                                                                            // 121\n        // extended elegibility trace                                                                                  // 122\n        var xtrace = this.trace.extended[id];                                                                          // 123\n        var neuron = this.neighboors[id];                                                                              // 124\n                                                                                                                       // 125\n        // if gated neuron's selfconnection is gated by this unit, the influence keeps track of the neuron's old state // 126\n        var influence = neuron.selfconnection.gater == this ? neuron.old :                                             // 127\n          0;                                                                                                           // 128\n                                                                                                                       // 129\n        // index runs over all the incoming connections to the gated neuron that are gated by this unit                // 130\n        for (var incoming in this.trace.influences[neuron.ID]) { // captures the effect that has an input connection to this unit, on a neuron that is gated by this unit\n          influence += this.trace.influences[neuron.ID][incoming].weight *                                             // 132\n            this.trace.influences[neuron.ID][incoming].from.activation;                                                // 133\n        }                                                                                                              // 134\n                                                                                                                       // 135\n        // eq. 18                                                                                                      // 136\n        xtrace[input.ID] = neuron.selfconnection.gain * neuron.selfconnection                                          // 137\n          .weight * xtrace[input.ID] + this.derivative * this.trace.elegibility[                                       // 138\n            input.ID] * influence;                                                                                     // 139\n      }                                                                                                                // 140\n    }                                                                                                                  // 141\n                                                                                                                       // 142\n    //  update gated connection's gains                                                                                // 143\n    for (var connection in this.connections.gated) {                                                                   // 144\n      this.connections.gated[connection].gain = this.activation;                                                       // 145\n    }                                                                                                                  // 146\n                                                                                                                       // 147\n    return this.activation;                                                                                            // 148\n  },                                                                                                                   // 149\n                                                                                                                       // 150\n  // back-propagate the error                                                                                          // 151\n  propagate: function(rate, target) {                                                                                  // 152\n    // error accumulator                                                                                               // 153\n    var error = 0;                                                                                                     // 154\n                                                                                                                       // 155\n    // output neurons get their error from the enviroment                                                              // 156\n    if (typeof target != 'undefined')                                                                                  // 157\n      error = target - this.activation;                                                                                // 158\n                                                                                                                       // 159\n    // error responsibilities from all the connections projected from this neuron                                      // 160\n    for (var id in this.connections.projected) {                                                                       // 161\n      var connection = this.connections.projected[id];                                                                 // 162\n      var neuron = connection.to;                                                                                      // 163\n      // Eq. 21                                                                                                        // 164\n      error += neuron.error.responsibility * connection.gain * connection.weight;                                      // 165\n    }                                                                                                                  // 166\n                                                                                                                       // 167\n    // projected error responsibility                                                                                  // 168\n    this.error.projected = this.derivative * error;                                                                    // 169\n                                                                                                                       // 170\n    error = 0;                                                                                                         // 171\n    // error responsibilities from all the connections gated by this neuron                                            // 172\n    for (var id in this.trace.extended) {                                                                              // 173\n      var neuron = this.neighboors[id]; // gated neuron                                                                // 174\n      var influence = neuron.selfconnection.gater == this ? neuron.old : 0; // if gated neuron's selfconnection is gated by this neuron\n                                                                                                                       // 176\n      // index runs over all the connections to the gated neuron that are gated by this neuron                         // 177\n      for (var input in this.trace.influences[id]) { // captures the effect that the input connection of this neuron have, on a neuron which its input/s is/are gated by this neuron\n        influence += this.trace.influences[id][input].weight * this.trace.influences[                                  // 179\n          neuron.ID][input].from.activation;                                                                           // 180\n      }                                                                                                                // 181\n      // eq. 22                                                                                                        // 182\n      error += neuron.error.responsibility * influence;                                                                // 183\n    }                                                                                                                  // 184\n                                                                                                                       // 185\n    // gated error responsibility                                                                                      // 186\n    this.error.gated = this.derivative * error;                                                                        // 187\n                                                                                                                       // 188\n    // error responsibility - Eq. 23                                                                                   // 189\n    this.error.responsibility = this.error.projected + this.error.gated;                                               // 190\n                                                                                                                       // 191\n    // learning rate                                                                                                   // 192\n    rate = rate || .1;                                                                                                 // 193\n                                                                                                                       // 194\n    // adjust all the neuron's incoming connections                                                                    // 195\n    for (var id in this.connections.inputs) {                                                                          // 196\n      var input = this.connections.inputs[id];                                                                         // 197\n                                                                                                                       // 198\n      // Eq. 24                                                                                                        // 199\n      var gradient = this.error.projected * this.trace.elegibility[input.ID];                                          // 200\n      for (var id in this.trace.extended) {                                                                            // 201\n        var neuron = this.neighboors[id];                                                                              // 202\n        gradient += neuron.error.responsibility * this.trace.extended[                                                 // 203\n          neuron.ID][input.ID];                                                                                        // 204\n      }                                                                                                                // 205\n      input.weight += rate * gradient; // adjust weights - aka learn                                                   // 206\n    }                                                                                                                  // 207\n                                                                                                                       // 208\n    // adjust bias                                                                                                     // 209\n    this.bias += rate * this.error.responsibility;                                                                     // 210\n  },                                                                                                                   // 211\n                                                                                                                       // 212\n  project: function(neuron, weight) {                                                                                  // 213\n    // self-connection                                                                                                 // 214\n    if (neuron == this) {                                                                                              // 215\n      this.selfconnection.weight = 1;                                                                                  // 216\n      return this.selfconnection;                                                                                      // 217\n    }                                                                                                                  // 218\n                                                                                                                       // 219\n    // check if connection already exists                                                                              // 220\n    var connected = this.connected(neuron);                                                                            // 221\n    if (connected) {                                                                                                   // 222\n      // update connection                                                                                             // 223\n      if (typeof weight != 'undefined')                                                                                // 224\n        connected.connection.weight = weight;                                                                          // 225\n      // return existing connection                                                                                    // 226\n      return connected.connection;                                                                                     // 227\n    } else {                                                                                                           // 228\n      // create a new connection                                                                                       // 229\n      var connection = new Neuron.connection(this, neuron, weight);                                                    // 230\n    }                                                                                                                  // 231\n                                                                                                                       // 232\n    // reference all the connections and traces                                                                        // 233\n    this.connections.projected[connection.ID] = connection;                                                            // 234\n    this.neighboors[neuron.ID] = neuron;                                                                               // 235\n    neuron.connections.inputs[connection.ID] = connection;                                                             // 236\n    neuron.trace.elegibility[connection.ID] = 0;                                                                       // 237\n                                                                                                                       // 238\n    for (var id in neuron.trace.extended) {                                                                            // 239\n      var trace = neuron.trace.extended[id];                                                                           // 240\n      trace[connection.ID] = 0;                                                                                        // 241\n    }                                                                                                                  // 242\n                                                                                                                       // 243\n    return connection;                                                                                                 // 244\n  },                                                                                                                   // 245\n                                                                                                                       // 246\n  gate: function(connection) {                                                                                         // 247\n    // add connection to gated list                                                                                    // 248\n    this.connections.gated[connection.ID] = connection;                                                                // 249\n                                                                                                                       // 250\n    var neuron = connection.to;                                                                                        // 251\n    if (!(neuron.ID in this.trace.extended)) {                                                                         // 252\n      // extended trace                                                                                                // 253\n      this.neighboors[neuron.ID] = neuron;                                                                             // 254\n      var xtrace = this.trace.extended[neuron.ID] = {};                                                                // 255\n      for (var id in this.connections.inputs) {                                                                        // 256\n        var input = this.connections.inputs[id];                                                                       // 257\n        xtrace[input.ID] = 0;                                                                                          // 258\n      }                                                                                                                // 259\n    }                                                                                                                  // 260\n                                                                                                                       // 261\n    // keep track                                                                                                      // 262\n    if (neuron.ID in this.trace.influences)                                                                            // 263\n      this.trace.influences[neuron.ID].push(connection);                                                               // 264\n    else                                                                                                               // 265\n      this.trace.influences[neuron.ID] = [connection];                                                                 // 266\n                                                                                                                       // 267\n    // set gater                                                                                                       // 268\n    connection.gater = this;                                                                                           // 269\n  },                                                                                                                   // 270\n                                                                                                                       // 271\n  // returns true or false whether the neuron is self-connected or not                                                 // 272\n  selfconnected: function() {                                                                                          // 273\n    return this.selfconnection.weight !== 0;                                                                           // 274\n  },                                                                                                                   // 275\n                                                                                                                       // 276\n  // returns true or false whether the neuron is connected to another neuron (parameter)                               // 277\n  connected: function(neuron) {                                                                                        // 278\n    var result = {                                                                                                     // 279\n      type: null,                                                                                                      // 280\n      connection: false                                                                                                // 281\n    };                                                                                                                 // 282\n                                                                                                                       // 283\n    if (this == neuron) {                                                                                              // 284\n      if (this.selfconnected()) {                                                                                      // 285\n        result.type = 'selfconnection';                                                                                // 286\n        result.connection = this.selfconnection;                                                                       // 287\n        return result;                                                                                                 // 288\n      } else                                                                                                           // 289\n        return false;                                                                                                  // 290\n    }                                                                                                                  // 291\n                                                                                                                       // 292\n    for (var type in this.connections) {                                                                               // 293\n      for (var connection in this.connections[type]) {                                                                 // 294\n        var connection = this.connections[type][connection];                                                           // 295\n        if (connection.to == neuron) {                                                                                 // 296\n          result.type = type;                                                                                          // 297\n          result.connection = connection;                                                                              // 298\n          return result;                                                                                               // 299\n        } else if (connection.from == neuron) {                                                                        // 300\n          result.type = type;                                                                                          // 301\n          result.connection = connection;                                                                              // 302\n          return result;                                                                                               // 303\n        }                                                                                                              // 304\n      }                                                                                                                // 305\n    }                                                                                                                  // 306\n                                                                                                                       // 307\n    return false;                                                                                                      // 308\n  },                                                                                                                   // 309\n                                                                                                                       // 310\n  // clears all the traces (the neuron forgets it's context, but the connections remain intact)                        // 311\n  clear: function() {                                                                                                  // 312\n                                                                                                                       // 313\n    for (var trace in this.trace.elegibility)                                                                          // 314\n      this.trace.elegibility[trace] = 0;                                                                               // 315\n                                                                                                                       // 316\n    for (var trace in this.trace.extended)                                                                             // 317\n      for (var extended in this.trace.extended[trace])                                                                 // 318\n        this.trace.extended[trace][extended] = 0;                                                                      // 319\n                                                                                                                       // 320\n    this.error.responsibility = this.error.projected = this.error.gated = 0;                                           // 321\n  },                                                                                                                   // 322\n                                                                                                                       // 323\n  // all the connections are randomized and the traces are cleared                                                     // 324\n  reset: function() {                                                                                                  // 325\n    this.clear();                                                                                                      // 326\n                                                                                                                       // 327\n    for (var type in this.connection)                                                                                  // 328\n      for (var connection in this.connection[type])                                                                    // 329\n        this.connection[type][connection].weight = Math.random() * .2 - .1;                                            // 330\n    this.bias = Math.random() * .2 - .1;                                                                               // 331\n                                                                                                                       // 332\n    this.old = this.state = this.activation = 0;                                                                       // 333\n  },                                                                                                                   // 334\n                                                                                                                       // 335\n  // hardcodes the behaviour of the neuron into an optimized function                                                  // 336\n  optimize: function(optimized) {                                                                                      // 337\n                                                                                                                       // 338\n    optimized = optimized || {};                                                                                       // 339\n    var that = this;                                                                                                   // 340\n    var store_activation = [];                                                                                         // 341\n    var store_trace = [];                                                                                              // 342\n    var store_propagation = [];                                                                                        // 343\n    var varID = optimized.memory | 0;                                                                                  // 344\n    var inputs = optimized.inputs || [];                                                                               // 345\n    var targets = optimized.targets || [];                                                                             // 346\n    var outputs = optimized.outputs || [];                                                                             // 347\n    var variables = optimized.variables || {};                                                                         // 348\n    var activation_sentences = optimized.activation_sentences || [];                                                   // 349\n    var trace_sentences = optimized.trace_sentences || [];                                                             // 350\n    var propagation_sentences = optimized.propagation_sentences || [];                                                 // 351\n                                                                                                                       // 352\n    // get/reserve space in memory by creating a unique ID for a variablel                                             // 353\n    var getVar = function() {                                                                                          // 354\n      var args = Array.prototype.slice.call(arguments);                                                                // 355\n                                                                                                                       // 356\n      if (args.length == 1) {                                                                                          // 357\n        if (args[0] == 'target') {                                                                                     // 358\n          var id = 'target_' + targets.length;                                                                         // 359\n          targets.push(varID);                                                                                         // 360\n        } else                                                                                                         // 361\n          var id = args[0];                                                                                            // 362\n        if (id in variables)                                                                                           // 363\n          return variables[id];                                                                                        // 364\n        return variables[id] = {                                                                                       // 365\n          value: 0,                                                                                                    // 366\n          id: varID++                                                                                                  // 367\n        };                                                                                                             // 368\n      } else {                                                                                                         // 369\n        var extended = args.length > 2;                                                                                // 370\n        if (extended)                                                                                                  // 371\n          var value = args.pop();                                                                                      // 372\n                                                                                                                       // 373\n        var unit = args.shift();                                                                                       // 374\n        var prop = args.pop();                                                                                         // 375\n                                                                                                                       // 376\n        if (!extended)                                                                                                 // 377\n          var value = unit[prop];                                                                                      // 378\n                                                                                                                       // 379\n        var id = prop + '_';                                                                                           // 380\n        for (var property in args)                                                                                     // 381\n          id += args[property] + '_';                                                                                  // 382\n        id += unit.ID;                                                                                                 // 383\n        if (id in variables)                                                                                           // 384\n          return variables[id];                                                                                        // 385\n                                                                                                                       // 386\n        return variables[id] = {                                                                                       // 387\n          value: value,                                                                                                // 388\n          id: varID++                                                                                                  // 389\n        };                                                                                                             // 390\n      }                                                                                                                // 391\n    };                                                                                                                 // 392\n                                                                                                                       // 393\n    // build sentence                                                                                                  // 394\n    var buildSentence = function() {                                                                                   // 395\n      var args = Array.prototype.slice.call(arguments);                                                                // 396\n      var store = args.pop();                                                                                          // 397\n      var sentence = \"\";                                                                                               // 398\n      for (var i in args)                                                                                              // 399\n        if (typeof args[i] == 'string')                                                                                // 400\n          sentence += args[i];                                                                                         // 401\n        else                                                                                                           // 402\n          sentence += 'F[' + args[i].id + ']';                                                                         // 403\n      store.push(sentence + ';');                                                                                      // 404\n    }                                                                                                                  // 405\n                                                                                                                       // 406\n    // helper to check if an object is empty                                                                           // 407\n    var isEmpty = function(obj) {                                                                                      // 408\n      for (var prop in obj) {                                                                                          // 409\n        if (obj.hasOwnProperty(prop))                                                                                  // 410\n          return false;                                                                                                // 411\n      }                                                                                                                // 412\n      return true;                                                                                                     // 413\n    };                                                                                                                 // 414\n                                                                                                                       // 415\n    // characteristics of the neuron                                                                                   // 416\n    var noProjections = isEmpty(this.connections.projected);                                                           // 417\n    var noGates = isEmpty(this.connections.gated);                                                                     // 418\n    var isInput = isEmpty(this.connections.inputs);                                                                    // 419\n    var isOutput = noProjections && noGates;                                                                           // 420\n                                                                                                                       // 421\n    // optimize neuron's behaviour                                                                                     // 422\n    var rate = getVar('rate');                                                                                         // 423\n    var activation = getVar(this, 'activation');                                                                       // 424\n    if (isInput)                                                                                                       // 425\n      inputs.push(activation.id);                                                                                      // 426\n    else {                                                                                                             // 427\n      activation_sentences.push(store_activation);                                                                     // 428\n      trace_sentences.push(store_trace);                                                                               // 429\n      propagation_sentences.push(store_propagation);                                                                   // 430\n      var old = getVar(this, 'old');                                                                                   // 431\n      var state = getVar(this, 'state');                                                                               // 432\n      var bias = getVar(this, 'bias');                                                                                 // 433\n      if (this.selfconnection.gater)                                                                                   // 434\n        var self_gain = getVar(this.selfconnection, 'gain');                                                           // 435\n      if (this.selfconnected())                                                                                        // 436\n        var self_weight = getVar(this.selfconnection, 'weight');                                                       // 437\n      buildSentence(old, ' = ', state, store_activation);                                                              // 438\n      if (this.selfconnected())                                                                                        // 439\n        if (this.selfconnection.gater)                                                                                 // 440\n          buildSentence(state, ' = ', self_gain, ' * ', self_weight, ' * ',                                            // 441\n            state, ' + ', bias, store_activation);                                                                     // 442\n        else                                                                                                           // 443\n          buildSentence(state, ' = ', self_weight, ' * ', state, ' + ',                                                // 444\n            bias, store_activation);                                                                                   // 445\n      else                                                                                                             // 446\n        buildSentence(state, ' = ', bias, store_activation);                                                           // 447\n      for (var i in this.connections.inputs) {                                                                         // 448\n        var input = this.connections.inputs[i];                                                                        // 449\n        var input_activation = getVar(input.from, 'activation');                                                       // 450\n        var input_weight = getVar(input, 'weight');                                                                    // 451\n        if (input.gater)                                                                                               // 452\n          var input_gain = getVar(input, 'gain');                                                                      // 453\n        if (this.connections.inputs[i].gater)                                                                          // 454\n          buildSentence(state, ' += ', input_activation, ' * ',                                                        // 455\n            input_weight, ' * ', input_gain, store_activation);                                                        // 456\n        else                                                                                                           // 457\n          buildSentence(state, ' += ', input_activation, ' * ',                                                        // 458\n            input_weight, store_activation);                                                                           // 459\n      }                                                                                                                // 460\n      var derivative = getVar(this, 'derivative');                                                                     // 461\n      switch (this.squash) {                                                                                           // 462\n        case Neuron.squash.LOGISTIC:                                                                                   // 463\n          buildSentence(activation, ' = (1 / (1 + Math.exp(-', state, ')))',                                           // 464\n            store_activation);                                                                                         // 465\n          buildSentence(derivative, ' = ', activation, ' * (1 - ',                                                     // 466\n            activation, ')', store_activation);                                                                        // 467\n          break;                                                                                                       // 468\n        case Neuron.squash.TANH:                                                                                       // 469\n          var eP = getVar('aux');                                                                                      // 470\n          var eN = getVar('aux_2');                                                                                    // 471\n          buildSentence(eP, ' = Math.exp(', state, ')', store_activation);                                             // 472\n          buildSentence(eN, ' = 1 / ', eP);                                                                            // 473\n          buildSentence(activation, ' = (', eP, ' - ', eN, ') / (', eP,                                                // 474\n            ' + ', eN, store_activation);                                                                              // 475\n          buildSentence(derivative, ' = 1 - (', activation, ' * ',                                                     // 476\n            activation, ')', store_activation);                                                                        // 477\n          break;                                                                                                       // 478\n        case Neuron.squash.IDENTITY:                                                                                   // 479\n          buildSentence(activation, ' = ', state, store_activation);                                                   // 480\n          buildSentence(derivative, ' = 1', store_activation);                                                         // 481\n          break;                                                                                                       // 482\n        case Neuron.squash.HLIM:                                                                                       // 483\n          buildSentence(activation, ' = +(', state, ' > 0)',                                                           // 484\n            store_activation);                                                                                         // 485\n          buildSentence(derivative, ' = 1', store_activation);                                                         // 486\n          break;                                                                                                       // 487\n      }                                                                                                                // 488\n                                                                                                                       // 489\n      for (var i in this.connections.inputs) {                                                                         // 490\n        var input = this.connections.inputs[i];                                                                        // 491\n        if (input.gater)                                                                                               // 492\n          var input_gain = getVar(input, 'gain');                                                                      // 493\n        var input_activation = getVar(input.from, 'activation');                                                       // 494\n        var trace = getVar(this, 'trace', 'elegibility', input.ID, this.trace                                          // 495\n          .elegibility[input.ID]);                                                                                     // 496\n        if (this.selfconnected()) {                                                                                    // 497\n          if (this.selfconnection.gater) {                                                                             // 498\n            if (input.gater)                                                                                           // 499\n              buildSentence(trace, ' = ', self_gain, ' * ', self_weight,                                               // 500\n                ' * ', trace, ' + ', input_gain, ' * ', input_activation,                                              // 501\n                store_trace);                                                                                          // 502\n            else                                                                                                       // 503\n              buildSentence(trace, ' = ', self_gain, ' * ', self_weight,                                               // 504\n                ' * ', trace, ' + ', input_activation, store_trace);                                                   // 505\n          } else {                                                                                                     // 506\n            if (input.gater)                                                                                           // 507\n              buildSentence(trace, ' = ', self_weight, ' * ', trace, ' + ',                                            // 508\n                input_gain, ' * ', input_activation, store_trace);                                                     // 509\n            else                                                                                                       // 510\n              buildSentence(trace, ' = ', self_weight, ' * ', trace, ' + ',                                            // 511\n                input_activation, store_trace);                                                                        // 512\n          }                                                                                                            // 513\n        } else {                                                                                                       // 514\n          if (input.gater)                                                                                             // 515\n            buildSentence(trace, ' = ', input_gain, ' * ', input_activation,                                           // 516\n              store_trace);                                                                                            // 517\n          else                                                                                                         // 518\n            buildSentence(trace, ' = ', input_activation, store_trace);                                                // 519\n        }                                                                                                              // 520\n        for (var id in this.trace.extended) {                                                                          // 521\n          // extended elegibility trace                                                                                // 522\n          var xtrace = this.trace.extended[id];                                                                        // 523\n          var neuron = this.neighboors[id];                                                                            // 524\n          var influence = getVar('aux');                                                                               // 525\n          var neuron_old = getVar(neuron, 'old');                                                                      // 526\n          if (neuron.selfconnection.gater == this)                                                                     // 527\n            buildSentence(influence, ' = ', neuron_old, store_trace);                                                  // 528\n          else                                                                                                         // 529\n            buildSentence(influence, ' = 0', store_trace);                                                             // 530\n          for (var incoming in this.trace.influences[neuron.ID]) {                                                     // 531\n            var incoming_weight = getVar(this.trace.influences[neuron.ID][                                             // 532\n              incoming                                                                                                 // 533\n            ], 'weight');                                                                                              // 534\n            var incoming_activation = getVar(this.trace.influences[neuron.ID]                                          // 535\n              [incoming].from, 'activation');                                                                          // 536\n                                                                                                                       // 537\n            buildSentence(influence, ' += ', incoming_weight, ' * ',                                                   // 538\n              incoming_activation, store_trace);                                                                       // 539\n          }                                                                                                            // 540\n          var trace = getVar(this, 'trace', 'elegibility', input.ID, this.trace                                        // 541\n            .elegibility[input.ID]);                                                                                   // 542\n          var xtrace = getVar(this, 'trace', 'extended', neuron.ID, input.ID,                                          // 543\n            this.trace.extended[neuron.ID][input.ID]);                                                                 // 544\n          if (neuron.selfconnected())                                                                                  // 545\n            var neuron_self_weight = getVar(neuron.selfconnection, 'weight');                                          // 546\n          if (neuron.selfconnection.gater)                                                                             // 547\n            var neuron_self_gain = getVar(neuron.selfconnection, 'gain');                                              // 548\n          if (neuron.selfconnected())                                                                                  // 549\n            if (neuron.selfconnection.gater)                                                                           // 550\n              buildSentence(xtrace, ' = ', neuron_self_gain, ' * ',                                                    // 551\n                neuron_self_weight, ' * ', xtrace, ' + ', derivative, ' * ',                                           // 552\n                trace, ' * ', influence, store_trace);                                                                 // 553\n            else                                                                                                       // 554\n              buildSentence(xtrace, ' = ', neuron_self_weight, ' * ',                                                  // 555\n                xtrace, ' + ', derivative, ' * ', trace, ' * ', influence,                                             // 556\n                store_trace);                                                                                          // 557\n          else                                                                                                         // 558\n            buildSentence(xtrace, ' = ', derivative, ' * ', trace, ' * ',                                              // 559\n              influence, store_trace);                                                                                 // 560\n        }                                                                                                              // 561\n      }                                                                                                                // 562\n      for (var connection in this.connections.gated) {                                                                 // 563\n        var gated_gain = getVar(this.connections.gated[connection], 'gain');                                           // 564\n        buildSentence(gated_gain, ' = ', activation, store_activation);                                                // 565\n      }                                                                                                                // 566\n    }                                                                                                                  // 567\n    if (!isInput) {                                                                                                    // 568\n      var responsibility = getVar(this, 'error', 'responsibility', this.error                                          // 569\n        .responsibility);                                                                                              // 570\n      if (isOutput) {                                                                                                  // 571\n        var target = getVar('target');                                                                                 // 572\n        buildSentence(responsibility, ' = ', target, ' - ', activation,                                                // 573\n          store_propagation);                                                                                          // 574\n        buildSentence(responsibility, ' *= ', derivative, store_propagation);                                          // 575\n        for (var id in this.connections.inputs) {                                                                      // 576\n          var input = this.connections.inputs[id];                                                                     // 577\n          var trace = getVar(this, 'trace', 'elegibility', input.ID, this.trace                                        // 578\n            .elegibility[input.ID]);                                                                                   // 579\n          var input_weight = getVar(input, 'weight');                                                                  // 580\n          buildSentence(input_weight, ' += ', rate, ' * (', responsibility,                                            // 581\n            ' * ', trace, ')', store_propagation);                                                                     // 582\n        }                                                                                                              // 583\n        outputs.push(activation.id);                                                                                   // 584\n      } else {                                                                                                         // 585\n        if (!noProjections && !noGates) {                                                                              // 586\n          var error = getVar('aux');                                                                                   // 587\n          for (var id in this.connections.projected) {                                                                 // 588\n            var connection = this.connections.projected[id];                                                           // 589\n            var neuron = connection.to;                                                                                // 590\n            var connection_weight = getVar(connection, 'weight');                                                      // 591\n            var neuron_responsibility = getVar(neuron, 'error',                                                        // 592\n              'responsibility', neuron.error.responsibility);                                                          // 593\n            if (connection.gater) {                                                                                    // 594\n              var connection_gain = getVar(connection, 'gain');                                                        // 595\n              buildSentence(error, ' += ', neuron_responsibility, ' * ',                                               // 596\n                connection_gain, ' * ', connection_weight,                                                             // 597\n                store_propagation);                                                                                    // 598\n            } else                                                                                                     // 599\n              buildSentence(error, ' += ', neuron_responsibility, ' * ',                                               // 600\n                connection_weight, store_propagation);                                                                 // 601\n          }                                                                                                            // 602\n          var projected = getVar(this, 'error', 'projected', this.error.projected);                                    // 603\n          buildSentence(projected, ' = ', derivative, ' * ', error,                                                    // 604\n            store_propagation);                                                                                        // 605\n          buildSentence(error, ' = 0', store_propagation);                                                             // 606\n          for (var id in this.trace.extended) {                                                                        // 607\n            var neuron = this.neighboors[id];                                                                          // 608\n            var influence = getVar('aux_2');                                                                           // 609\n            var neuron_old = getVar(neuron, 'old');                                                                    // 610\n            if (neuron.selfconnection.gater == this)                                                                   // 611\n              buildSentence(influence, ' = ', neuron_old, store_propagation);                                          // 612\n            else                                                                                                       // 613\n              buildSentence(influence, ' = 0', store_propagation);                                                     // 614\n            for (var input in this.trace.influences[neuron.ID]) {                                                      // 615\n              var connection = this.trace.influences[neuron.ID][input];                                                // 616\n              var connection_weight = getVar(connection, 'weight');                                                    // 617\n              var neuron_activation = getVar(connection.from, 'activation');                                           // 618\n              buildSentence(influence, ' += ', connection_weight, ' * ',                                               // 619\n                neuron_activation, store_propagation);                                                                 // 620\n            }                                                                                                          // 621\n            var neuron_responsibility = getVar(neuron, 'error',                                                        // 622\n              'responsibility', neuron.error.responsibility);                                                          // 623\n            buildSentence(error, ' += ', neuron_responsibility, ' * ',                                                 // 624\n              influence, store_propagation);                                                                           // 625\n          }                                                                                                            // 626\n          var gated = getVar(this, 'error', 'gated', this.error.gated);                                                // 627\n          buildSentence(gated, ' = ', derivative, ' * ', error,                                                        // 628\n            store_propagation);                                                                                        // 629\n          buildSentence(responsibility, ' = ', projected, ' + ', gated,                                                // 630\n            store_propagation);                                                                                        // 631\n          for (var id in this.connections.inputs) {                                                                    // 632\n            var input = this.connections.inputs[id];                                                                   // 633\n            var gradient = getVar('aux');                                                                              // 634\n            var trace = getVar(this, 'trace', 'elegibility', input.ID, this                                            // 635\n              .trace.elegibility[input.ID]);                                                                           // 636\n            buildSentence(gradient, ' = ', projected, ' * ', trace,                                                    // 637\n              store_propagation);                                                                                      // 638\n            for (var id in this.trace.extended) {                                                                      // 639\n              var neuron = this.neighboors[id];                                                                        // 640\n              var neuron_responsibility = getVar(neuron, 'error',                                                      // 641\n                'responsibility', neuron.error.responsibility);                                                        // 642\n              var xtrace = getVar(this, 'trace', 'extended', neuron.ID,                                                // 643\n                input.ID, this.trace.extended[neuron.ID][input.ID]);                                                   // 644\n              buildSentence(gradient, ' += ', neuron_responsibility, ' * ',                                            // 645\n                xtrace, store_propagation);                                                                            // 646\n            }                                                                                                          // 647\n            var input_weight = getVar(input, 'weight');                                                                // 648\n            buildSentence(input_weight, ' += ', rate, ' * ', gradient,                                                 // 649\n              store_propagation);                                                                                      // 650\n          }                                                                                                            // 651\n                                                                                                                       // 652\n        } else if (noGates) {                                                                                          // 653\n          buildSentence(responsibility, ' = 0', store_propagation);                                                    // 654\n          for (var id in this.connections.projected) {                                                                 // 655\n            var connection = this.connections.projected[id];                                                           // 656\n            var neuron = connection.to;                                                                                // 657\n            var connection_weight = getVar(connection, 'weight');                                                      // 658\n            var neuron_responsibility = getVar(neuron, 'error',                                                        // 659\n              'responsibility', neuron.error.responsibility);                                                          // 660\n            if (connection.gater) {                                                                                    // 661\n              var connection_gain = getVar(connection, 'gain');                                                        // 662\n              buildSentence(responsibility, ' += ', neuron_responsibility,                                             // 663\n                ' * ', connection_gain, ' * ', connection_weight,                                                      // 664\n                store_propagation);                                                                                    // 665\n            } else                                                                                                     // 666\n              buildSentence(responsibility, ' += ', neuron_responsibility,                                             // 667\n                ' * ', connection_weight, store_propagation);                                                          // 668\n          }                                                                                                            // 669\n          buildSentence(responsibility, ' *= ', derivative,                                                            // 670\n            store_propagation);                                                                                        // 671\n          for (var id in this.connections.inputs) {                                                                    // 672\n            var input = this.connections.inputs[id];                                                                   // 673\n            var trace = getVar(this, 'trace', 'elegibility', input.ID, this                                            // 674\n              .trace.elegibility[input.ID]);                                                                           // 675\n            var input_weight = getVar(input, 'weight');                                                                // 676\n            buildSentence(input_weight, ' += ', rate, ' * (',                                                          // 677\n              responsibility, ' * ', trace, ')', store_propagation);                                                   // 678\n          }                                                                                                            // 679\n        } else if (noProjections) {                                                                                    // 680\n          buildSentence(responsibility, ' = 0', store_propagation);                                                    // 681\n          for (var id in this.trace.extended) {                                                                        // 682\n            var neuron = this.neighboors[id];                                                                          // 683\n            var influence = getVar('aux');                                                                             // 684\n            var neuron_old = getVar(neuron, 'old');                                                                    // 685\n            if (neuron.selfconnection.gater == this)                                                                   // 686\n              buildSentence(influence, ' = ', neuron_old, store_propagation);                                          // 687\n            else                                                                                                       // 688\n              buildSentence(influence, ' = 0', store_propagation);                                                     // 689\n            for (var input in this.trace.influences[neuron.ID]) {                                                      // 690\n              var connection = this.trace.influences[neuron.ID][input];                                                // 691\n              var connection_weight = getVar(connection, 'weight');                                                    // 692\n              var neuron_activation = getVar(connection.from, 'activation');                                           // 693\n              buildSentence(influence, ' += ', connection_weight, ' * ',                                               // 694\n                neuron_activation, store_propagation);                                                                 // 695\n            }                                                                                                          // 696\n            var neuron_responsibility = getVar(neuron, 'error',                                                        // 697\n              'responsibility', neuron.error.responsibility);                                                          // 698\n            buildSentence(responsibility, ' += ', neuron_responsibility,                                               // 699\n              ' * ', influence, store_propagation);                                                                    // 700\n          }                                                                                                            // 701\n          buildSentence(responsibility, ' *= ', derivative,                                                            // 702\n            store_propagation);                                                                                        // 703\n          for (var id in this.connections.inputs) {                                                                    // 704\n            var input = this.connections.inputs[id];                                                                   // 705\n            var gradient = getVar('aux');                                                                              // 706\n            buildSentence(gradient, ' = 0', store_propagation);                                                        // 707\n            for (var id in this.trace.extended) {                                                                      // 708\n              var neuron = this.neighboors[id];                                                                        // 709\n              var neuron_responsibility = getVar(neuron, 'error',                                                      // 710\n                'responsibility', neuron.error.responsibility);                                                        // 711\n              var xtrace = getVar(this, 'trace', 'extended', neuron.ID,                                                // 712\n                input.ID, this.trace.extended[neuron.ID][input.ID]);                                                   // 713\n              buildSentence(gradient, ' += ', neuron_responsibility, ' * ',                                            // 714\n                xtrace, store_propagation);                                                                            // 715\n            }                                                                                                          // 716\n            var input_weight = getVar(input, 'weight');                                                                // 717\n            buildSentence(input_weight, ' += ', rate, ' * ', gradient,                                                 // 718\n              store_propagation);                                                                                      // 719\n          }                                                                                                            // 720\n        }                                                                                                              // 721\n      }                                                                                                                // 722\n      buildSentence(bias, ' += ', rate, ' * ', responsibility,                                                         // 723\n        store_propagation);                                                                                            // 724\n    }                                                                                                                  // 725\n    return {                                                                                                           // 726\n      memory: varID,                                                                                                   // 727\n      inputs: inputs,                                                                                                  // 728\n      outputs: outputs,                                                                                                // 729\n      targets: targets,                                                                                                // 730\n      variables: variables,                                                                                            // 731\n      activation_sentences: activation_sentences,                                                                      // 732\n      trace_sentences: trace_sentences,                                                                                // 733\n      propagation_sentences: propagation_sentences                                                                     // 734\n    }                                                                                                                  // 735\n  }                                                                                                                    // 736\n}                                                                                                                      // 737\n                                                                                                                       // 738\n                                                                                                                       // 739\n// represents a connection between two neurons                                                                         // 740\nNeuron.connection = function Connection(from, to, weight) {                                                            // 741\n                                                                                                                       // 742\n  if (!from || !to)                                                                                                    // 743\n    throw \"Connection Error: Invalid neurons\";                                                                         // 744\n                                                                                                                       // 745\n  this.ID = Neuron.connection.uid();                                                                                   // 746\n  this.from = from;                                                                                                    // 747\n  this.to = to;                                                                                                        // 748\n  this.weight = typeof weight == 'undefined' ? Math.random() * .2 - .1 :                                               // 749\n    weight;                                                                                                            // 750\n  this.gain = 1;                                                                                                       // 751\n  this.gater = null;                                                                                                   // 752\n}                                                                                                                      // 753\n                                                                                                                       // 754\n                                                                                                                       // 755\n// squashing functions                                                                                                 // 756\nNeuron.squash = {};                                                                                                    // 757\n                                                                                                                       // 758\n// eq. 5 & 5'                                                                                                          // 759\nNeuron.squash.LOGISTIC = function(x, derivate) {                                                                       // 760\n  if (!derivate)                                                                                                       // 761\n    return 1 / (1 + Math.exp(-x));                                                                                     // 762\n  var fx = Neuron.squash.LOGISTIC(x);                                                                                  // 763\n  return fx * (1 - fx);                                                                                                // 764\n};                                                                                                                     // 765\nNeuron.squash.TANH = function(x, derivate) {                                                                           // 766\n  if (derivate)                                                                                                        // 767\n    return 1 - Math.pow(Neuron.squash.TANH(x), 2);                                                                     // 768\n  var eP = Math.exp(x);                                                                                                // 769\n  var eN = 1 / eP;                                                                                                     // 770\n  return (eP - eN) / (eP + eN);                                                                                        // 771\n};                                                                                                                     // 772\nNeuron.squash.IDENTITY = function(x, derivate) {                                                                       // 773\n  return derivate ? 1 : x;                                                                                             // 774\n};                                                                                                                     // 775\nNeuron.squash.HLIM = function(x, derivate) {                                                                           // 776\n  return derivate ? 1 : +(x > 0);                                                                                      // 777\n};                                                                                                                     // 778\n                                                                                                                       // 779\n// unique ID's                                                                                                         // 780\n(function() {                                                                                                          // 781\n  var neurons = 0;                                                                                                     // 782\n  var connections = 0;                                                                                                 // 783\n  Neuron.uid = function() {                                                                                            // 784\n    return neurons++;                                                                                                  // 785\n  }                                                                                                                    // 786\n  Neuron.connection.uid = function() {                                                                                 // 787\n    return connections++;                                                                                              // 788\n  }                                                                                                                    // 789\n  Neuron.quantity = function() {                                                                                       // 790\n    return {                                                                                                           // 791\n      neurons: neurons,                                                                                                // 792\n      connections: connections                                                                                         // 793\n    }                                                                                                                  // 794\n  }                                                                                                                    // 795\n})();                                                                                                                  // 796\n                                                                                                                       // 797\n                                                                                                                       // 798\n/*******************************************************************************************                           // 799\n                                            LAYER                                                                      // 800\n*******************************************************************************************/                           // 801\n                                                                                                                       // 802\nfunction Layer(size, label) {                                                                                          // 803\n  this.size = size | 0;                                                                                                // 804\n  this.list = [];                                                                                                      // 805\n  this.label = label || null;                                                                                          // 806\n                                                                                                                       // 807\n  while (size--) {                                                                                                     // 808\n    var neuron = new Neuron();                                                                                         // 809\n    this.list.push(neuron);                                                                                            // 810\n  }                                                                                                                    // 811\n}                                                                                                                      // 812\nLayer.prototype = {                                                                                                    // 813\n                                                                                                                       // 814\n  // activates all the neurons in the layer                                                                            // 815\n  activate: function(input) {                                                                                          // 816\n                                                                                                                       // 817\n    var activations = [];                                                                                              // 818\n                                                                                                                       // 819\n    if (typeof input != 'undefined') {                                                                                 // 820\n      if (input.length != this.size)                                                                                   // 821\n        throw \"INPUT size and LAYER size must be the same to activate!\";                                               // 822\n                                                                                                                       // 823\n      for (var id in this.list) {                                                                                      // 824\n        var neuron = this.list[id];                                                                                    // 825\n        var activation = neuron.activate(input[id]);                                                                   // 826\n        activations.push(activation);                                                                                  // 827\n      }                                                                                                                // 828\n    } else {                                                                                                           // 829\n      for (var id in this.list) {                                                                                      // 830\n        var neuron = this.list[id];                                                                                    // 831\n        var activation = neuron.activate();                                                                            // 832\n        activations.push(activation);                                                                                  // 833\n      }                                                                                                                // 834\n    }                                                                                                                  // 835\n    return activations;                                                                                                // 836\n  },                                                                                                                   // 837\n                                                                                                                       // 838\n  // propagates the error on all the neurons of the layer                                                              // 839\n  propagate: function(rate, target) {                                                                                  // 840\n                                                                                                                       // 841\n    if (typeof target != 'undefined') {                                                                                // 842\n      if (target.length != this.size)                                                                                  // 843\n        throw \"TARGET size and LAYER size must be the same to propagate!\";                                             // 844\n                                                                                                                       // 845\n      for (var id = this.list.length - 1; id >= 0; id--) {                                                             // 846\n        var neuron = this.list[id];                                                                                    // 847\n        neuron.propagate(rate, target[id]);                                                                            // 848\n      }                                                                                                                // 849\n    } else {                                                                                                           // 850\n      for (var id = this.list.length - 1; id >= 0; id--) {                                                             // 851\n        var neuron = this.list[id];                                                                                    // 852\n        neuron.propagate(rate);                                                                                        // 853\n      }                                                                                                                // 854\n    }                                                                                                                  // 855\n  },                                                                                                                   // 856\n                                                                                                                       // 857\n  // projects a connection from this layer to another one                                                              // 858\n  project: function(layer, type, weights) {                                                                            // 859\n                                                                                                                       // 860\n    if (layer instanceof Network)                                                                                      // 861\n      layer = layer.layers.input;                                                                                      // 862\n                                                                                                                       // 863\n    if (layer instanceof Layer) {                                                                                      // 864\n      if (!this.connected(layer))                                                                                      // 865\n        return new Layer.connection(this, layer, type, weights);                                                       // 866\n    } else                                                                                                             // 867\n      throw \"Invalid argument, you can only project connections to LAYERS and NETWORKS!\";                              // 868\n                                                                                                                       // 869\n                                                                                                                       // 870\n  },                                                                                                                   // 871\n                                                                                                                       // 872\n  // gates a connection betwenn two layers                                                                             // 873\n  gate: function(connection, type) {                                                                                   // 874\n                                                                                                                       // 875\n    if (type == Layer.gateType.INPUT) {                                                                                // 876\n      if (connection.to.size != this.size)                                                                             // 877\n        throw \"GATER layer and CONNECTION.TO layer must be the same size in order to gate!\";                           // 878\n                                                                                                                       // 879\n      for (var id in connection.to.list) {                                                                             // 880\n        var neuron = connection.to.list[id];                                                                           // 881\n        var gater = this.list[id];                                                                                     // 882\n        for (var input in neuron.connections.inputs) {                                                                 // 883\n          var gated = neuron.connections.inputs[input];                                                                // 884\n          if (gated.ID in connection.connections)                                                                      // 885\n            gater.gate(gated);                                                                                         // 886\n        }                                                                                                              // 887\n      }                                                                                                                // 888\n    } else if (type == Layer.gateType.OUTPUT) {                                                                        // 889\n      if (connection.from.size != this.size)                                                                           // 890\n        throw \"GATER layer and CONNECTION.FROM layer must be the same size in order to gate!\";                         // 891\n                                                                                                                       // 892\n      for (var id in connection.from.list) {                                                                           // 893\n        var neuron = connection.from.list[id];                                                                         // 894\n        var gater = this.list[id];                                                                                     // 895\n        for (var projected in neuron.connections.projected) {                                                          // 896\n          var gated = neuron.connections.projected[projected];                                                         // 897\n          if (gated.ID in connection.connections)                                                                      // 898\n            gater.gate(gated);                                                                                         // 899\n        }                                                                                                              // 900\n      }                                                                                                                // 901\n    } else if (type == Layer.gateType.ONE_TO_ONE) {                                                                    // 902\n      if (connection.size != this.size)                                                                                // 903\n        throw \"The number of GATER UNITS must be the same as the number of CONNECTIONS to gate!\";                      // 904\n                                                                                                                       // 905\n      for (var id in connection.list) {                                                                                // 906\n        var gater = this.list[id];                                                                                     // 907\n        var gated = connection.list[id];                                                                               // 908\n        gater.gate(gated);                                                                                             // 909\n      }                                                                                                                // 910\n    }                                                                                                                  // 911\n  },                                                                                                                   // 912\n                                                                                                                       // 913\n  // true or false whether the whole layer is self-connected or not                                                    // 914\n  selfconnected: function() {                                                                                          // 915\n                                                                                                                       // 916\n    for (var id in this.list) {                                                                                        // 917\n      var neuron = this.list[id];                                                                                      // 918\n      if (!neuron.selfconnected())                                                                                     // 919\n        return false;                                                                                                  // 920\n    }                                                                                                                  // 921\n    return true;                                                                                                       // 922\n  },                                                                                                                   // 923\n                                                                                                                       // 924\n  // true of false whether the layer is connected to another layer (parameter) or not                                  // 925\n  connected: function(layer) {                                                                                         // 926\n    // Check if ALL to ALL connection                                                                                  // 927\n    var connections = 0;                                                                                               // 928\n    for (var here in this.list) {                                                                                      // 929\n      for (var there in layer.list) {                                                                                  // 930\n        var from = this.list[here];                                                                                    // 931\n        var to = layer.list[there];                                                                                    // 932\n        var connected = from.connected(to);                                                                            // 933\n        if (connected.type == 'projected')                                                                             // 934\n          connections++;                                                                                               // 935\n      }                                                                                                                // 936\n    }                                                                                                                  // 937\n    if (connections == this.size * layer.size)                                                                         // 938\n      return Layer.connectionType.ALL_TO_ALL;                                                                          // 939\n                                                                                                                       // 940\n    // Check if ONE to ONE connection                                                                                  // 941\n    connections = 0;                                                                                                   // 942\n    for (var neuron in this.list) {                                                                                    // 943\n      var from = this.list[neuron];                                                                                    // 944\n      var to = layer.list[neuron];                                                                                     // 945\n      var connected = from.connected(to);                                                                              // 946\n      if (connected == 'projected')                                                                                    // 947\n        connections++;                                                                                                 // 948\n    }                                                                                                                  // 949\n    if (connections == this.size)                                                                                      // 950\n      return Layer.connectionType.ONE_TO_ONE;                                                                          // 951\n  },                                                                                                                   // 952\n                                                                                                                       // 953\n  // clears all the neuorns in the layer                                                                               // 954\n  clear: function() {                                                                                                  // 955\n    for (var id in this.list) {                                                                                        // 956\n      var neuron = this.list[id];                                                                                      // 957\n      neuron.clear();                                                                                                  // 958\n    }                                                                                                                  // 959\n  },                                                                                                                   // 960\n                                                                                                                       // 961\n  // resets all the neurons in the layer                                                                               // 962\n  reset: function() {                                                                                                  // 963\n    for (var id in this.list) {                                                                                        // 964\n      var neuron = this.list[id];                                                                                      // 965\n      neuron.reset();                                                                                                  // 966\n    }                                                                                                                  // 967\n  },                                                                                                                   // 968\n                                                                                                                       // 969\n  // returns all the neurons in the layer (array)                                                                      // 970\n  neurons: function() {                                                                                                // 971\n    return this.list;                                                                                                  // 972\n  },                                                                                                                   // 973\n                                                                                                                       // 974\n  // adds a neuron to the layer                                                                                        // 975\n  add: function(neuron) {                                                                                              // 976\n    this.neurons[neuron.ID] = neuron || new Neuron();                                                                  // 977\n    this.list.push(neuron);                                                                                            // 978\n    this.size++;                                                                                                       // 979\n  },                                                                                                                   // 980\n                                                                                                                       // 981\n  set: function(options) {                                                                                             // 982\n    options = options || {};                                                                                           // 983\n                                                                                                                       // 984\n    for (var i in this.list) {                                                                                         // 985\n      var neuron = this.list[i];                                                                                       // 986\n      if (options.label)                                                                                               // 987\n        neuron.label = options.label + '_' + neuron.ID;                                                                // 988\n      if (options.squash)                                                                                              // 989\n        neuron.squash = options.squash;                                                                                // 990\n      if (options.bias)                                                                                                // 991\n        neuron.bias = options.bias;                                                                                    // 992\n    }                                                                                                                  // 993\n    return this;                                                                                                       // 994\n  }                                                                                                                    // 995\n}                                                                                                                      // 996\n                                                                                                                       // 997\n// represents a connection from one layer to another, and keeps track of its weight and gain                           // 998\nLayer.connection = function LayerConnection(fromLayer, toLayer, type, weights) {                                       // 999\n  this.ID = Layer.connection.uid();                                                                                    // 1000\n  this.from = fromLayer;                                                                                               // 1001\n  this.to = toLayer;                                                                                                   // 1002\n  this.selfconnection = toLayer == fromLayer;                                                                          // 1003\n  this.type = type || Layer.connectionType.ALL_TO_ALL;                                                                 // 1004\n  this.connections = {};                                                                                               // 1005\n  this.list = [];                                                                                                      // 1006\n  this.size = 0;                                                                                                       // 1007\n                                                                                                                       // 1008\n  if (this.type == Layer.connectionType.ALL_TO_ALL) {                                                                  // 1009\n    for (var here in this.from.list) {                                                                                 // 1010\n      for (var there in this.to.list) {                                                                                // 1011\n        var from = this.from.list[here];                                                                               // 1012\n        var to = this.to.list[there];                                                                                  // 1013\n        var connection = from.project(to, weights);                                                                    // 1014\n                                                                                                                       // 1015\n        this.connections[connection.ID] = connection;                                                                  // 1016\n        this.size = this.list.push(connection);                                                                        // 1017\n      }                                                                                                                // 1018\n    }                                                                                                                  // 1019\n  } else if (this.type == Layer.connectionType.ONE_TO_ONE) {                                                           // 1020\n                                                                                                                       // 1021\n    for (var neuron in this.from.list) {                                                                               // 1022\n      var from = this.from.list[neuron];                                                                               // 1023\n      var to = this.to.list[neuron];                                                                                   // 1024\n      var connection = from.project(to, weights);                                                                      // 1025\n                                                                                                                       // 1026\n      this.connections[connection.ID] = connection;                                                                    // 1027\n      this.size = this.list.push(connection);                                                                          // 1028\n    }                                                                                                                  // 1029\n  }                                                                                                                    // 1030\n}                                                                                                                      // 1031\n                                                                                                                       // 1032\n// types of connections                                                                                                // 1033\nLayer.connectionType = {};                                                                                             // 1034\nLayer.connectionType.ALL_TO_ALL = \"ALL TO ALL\";                                                                        // 1035\nLayer.connectionType.ONE_TO_ONE = \"ONE TO ONE\";                                                                        // 1036\n                                                                                                                       // 1037\n// types of gates                                                                                                      // 1038\nLayer.gateType = {};                                                                                                   // 1039\nLayer.gateType.INPUT = \"INPUT\";                                                                                        // 1040\nLayer.gateType.OUTPUT = \"OUTPUT\";                                                                                      // 1041\nLayer.gateType.ONE_TO_ONE = \"ONE TO ONE\";                                                                              // 1042\n                                                                                                                       // 1043\n(function() {                                                                                                          // 1044\n  var netoworks = 0;                                                                                                   // 1045\n  var connections = 0;                                                                                                 // 1046\n  Network.uid = function() {                                                                                           // 1047\n    return netoworks++;                                                                                                // 1048\n  }                                                                                                                    // 1049\n  Layer.connection.uid = function() {                                                                                  // 1050\n    return connections++;                                                                                              // 1051\n  }                                                                                                                    // 1052\n})();                                                                                                                  // 1053\n                                                                                                                       // 1054\n                                                                                                                       // 1055\n/*******************************************************************************************                           // 1056\n                                         NETWORK                                                                       // 1057\n*******************************************************************************************/                           // 1058\n                                                                                                                       // 1059\nfunction Network(layers) {                                                                                             // 1060\n  if (typeof layers != 'undefined') {                                                                                  // 1061\n    this.layers = layers || {                                                                                          // 1062\n      input: null,                                                                                                     // 1063\n      hidden: {},                                                                                                      // 1064\n      output: null                                                                                                     // 1065\n    };                                                                                                                 // 1066\n    this.optimized = null;                                                                                             // 1067\n  }                                                                                                                    // 1068\n}                                                                                                                      // 1069\nNetwork.prototype = {                                                                                                  // 1070\n                                                                                                                       // 1071\n  // feed-forward activation of all the layers to produce an ouput                                                     // 1072\n  activate: function(input) {                                                                                          // 1073\n                                                                                                                       // 1074\n    if (!this.optimized)                                                                                               // 1075\n      this.optimize();                                                                                                 // 1076\n                                                                                                                       // 1077\n    return this.optimized.activate(input);                                                                             // 1078\n  },                                                                                                                   // 1079\n                                                                                                                       // 1080\n  // back-propagate the error thru the network                                                                         // 1081\n  propagate: function(rate, target) {                                                                                  // 1082\n                                                                                                                       // 1083\n    if (!this.optimized)                                                                                               // 1084\n      this.optimize();                                                                                                 // 1085\n                                                                                                                       // 1086\n    return this.optimized.propagate(rate, target);                                                                     // 1087\n  },                                                                                                                   // 1088\n                                                                                                                       // 1089\n  // project a connection to another unit (either a network or a layer)                                                // 1090\n  project: function(unit, type, weights) {                                                                             // 1091\n                                                                                                                       // 1092\n    if (this.optimized)                                                                                                // 1093\n      this.optimized.reset();                                                                                          // 1094\n                                                                                                                       // 1095\n    if (unit instanceof Network)                                                                                       // 1096\n      return this.layers.output.project(unit.layers.input, type, weights);                                             // 1097\n                                                                                                                       // 1098\n    if (unit instanceof Layer)                                                                                         // 1099\n      return this.layers.output.project(unit, type, weights);                                                          // 1100\n                                                                                                                       // 1101\n    throw \"Invalid argument, you can only project connections to LAYERS and NETWORKS!\";                                // 1102\n  },                                                                                                                   // 1103\n                                                                                                                       // 1104\n  // let this network gate a connection                                                                                // 1105\n  gate: function(connection, type) {                                                                                   // 1106\n    if (this.optimized)                                                                                                // 1107\n      this.optimized.reset();                                                                                          // 1108\n    this.layers.output.gate(connection, type);                                                                         // 1109\n  },                                                                                                                   // 1110\n                                                                                                                       // 1111\n  // clear all elegibility traces and extended elegibility traces (the network forgets its context, but not what was trained)\n  clear: function() {                                                                                                  // 1113\n                                                                                                                       // 1114\n    this.restore();                                                                                                    // 1115\n                                                                                                                       // 1116\n    var inputLayer = this.layers.input,                                                                                // 1117\n      outputLayer = this.layers.output;                                                                                // 1118\n                                                                                                                       // 1119\n    inputLayer.clear();                                                                                                // 1120\n    for (var layer in this.layers.hidden) {                                                                            // 1121\n      var hiddenLayer = this.layers.hidden[layer];                                                                     // 1122\n      hiddenLayer.clear();                                                                                             // 1123\n    }                                                                                                                  // 1124\n    outputLayer.clear();                                                                                               // 1125\n                                                                                                                       // 1126\n    if (this.optimized)                                                                                                // 1127\n      this.optimized.reset();                                                                                          // 1128\n  },                                                                                                                   // 1129\n                                                                                                                       // 1130\n  // reset all weights and clear all traces (ends up like a new network)                                               // 1131\n  reset: function() {                                                                                                  // 1132\n                                                                                                                       // 1133\n    this.restore();                                                                                                    // 1134\n                                                                                                                       // 1135\n    var inputLayer = this.layers.input,                                                                                // 1136\n      outputLayer = this.layers.output;                                                                                // 1137\n                                                                                                                       // 1138\n    inputLayer.reset();                                                                                                // 1139\n    for (var layer in this.layers.hidden) {                                                                            // 1140\n      var hiddenLayer = this.layers.hidden[layer];                                                                     // 1141\n      hiddenLayer.reset();                                                                                             // 1142\n    }                                                                                                                  // 1143\n    outputLayer.reset();                                                                                               // 1144\n                                                                                                                       // 1145\n    if (this.optimized)                                                                                                // 1146\n      this.optimized.reset();                                                                                          // 1147\n  },                                                                                                                   // 1148\n                                                                                                                       // 1149\n  // hardcodes the behaviour of the whole network into a single optimized function                                     // 1150\n  optimize: function() {                                                                                               // 1151\n                                                                                                                       // 1152\n    var optimized = {};                                                                                                // 1153\n    var neurons = this.neurons();                                                                                      // 1154\n                                                                                                                       // 1155\n    for (var i in neurons) {                                                                                           // 1156\n      var neuron = neurons[i].neuron;                                                                                  // 1157\n      while (neuron.neuron)                                                                                            // 1158\n        neuron = neuron.neuron;                                                                                        // 1159\n      optimized = neuron.optimize(optimized);                                                                          // 1160\n    }                                                                                                                  // 1161\n    optimized.propagation_sentences.reverse();                                                                         // 1162\n                                                                                                                       // 1163\n    var hardcode = \"\";                                                                                                 // 1164\n    hardcode += \"var F = Float64Array ? new Float64Array(\" + optimized.memory +                                        // 1165\n      \") : []; \";                                                                                                      // 1166\n    for (var i in optimized.variables)                                                                                 // 1167\n      hardcode += \"F[\" + optimized.variables[i].id + \"] = \" + (optimized.variables[                                    // 1168\n        i].value || 0) + \"; \";                                                                                         // 1169\n    hardcode += \"var activate = function(input){\\n\";                                                                   // 1170\n    for (var i in optimized.inputs)                                                                                    // 1171\n      hardcode += \"F[\" + optimized.inputs[i] + \"] = input[\" + i + \"]; \";                                               // 1172\n    for (var i in optimized.activation_sentences) {                                                                    // 1173\n      hardcode += optimized.activation_sentences[i].join(\" \");                                                         // 1174\n      hardcode += optimized.trace_sentences[i].join(\" \");                                                              // 1175\n    }                                                                                                                  // 1176\n    hardcode += \" var output = []; \"                                                                                   // 1177\n    for (var i in optimized.outputs)                                                                                   // 1178\n      hardcode += \"output[\" + i + \"] = F[\" + optimized.outputs[i] + \"]; \";                                             // 1179\n    hardcode += \"return output; }; \"                                                                                   // 1180\n    hardcode += \"var propagate = function(rate, target){\\n\";                                                           // 1181\n    hardcode += \"F[\" + optimized.variables.rate.id + \"] = rate; \";                                                     // 1182\n    for (var i in optimized.targets)                                                                                   // 1183\n      hardcode += \"F[\" + optimized.targets[i] + \"] = target[\" + i + \"]; \";                                             // 1184\n    for (var i in optimized.propagation_sentences)                                                                     // 1185\n      hardcode += optimized.propagation_sentences[i].join(\" \") + \" \";                                                  // 1186\n    hardcode += \" };\\n\";                                                                                               // 1187\n    hardcode +=                                                                                                        // 1188\n      \"var ownership = function(memoryBuffer){\\nF = memoryBuffer;\\nthis.memory = F;\\n};\\n\";                            // 1189\n    hardcode +=                                                                                                        // 1190\n      \"return {\\nmemory: F,\\nactivate: activate,\\npropagate: propagate,\\nownership: ownership\\n};\";                    // 1191\n    hardcode = hardcode.split(\";\").join(\";\\n\");                                                                        // 1192\n                                                                                                                       // 1193\n    var constructor = new Function(hardcode);                                                                          // 1194\n                                                                                                                       // 1195\n    var network = constructor();                                                                                       // 1196\n    network.data = {                                                                                                   // 1197\n      variables: optimized.variables,                                                                                  // 1198\n      activate: optimized.activation_sentences,                                                                        // 1199\n      propagate: optimized.propagation_sentences,                                                                      // 1200\n      trace: optimized.trace_sentences,                                                                                // 1201\n      inputs: optimized.inputs,                                                                                        // 1202\n      outputs: optimized.outputs,                                                                                      // 1203\n      check_activation: this.activate,                                                                                 // 1204\n      check_propagation: this.propagate                                                                                // 1205\n    }                                                                                                                  // 1206\n    network.reset = function() {                                                                                       // 1207\n      if (this.optimized) {                                                                                            // 1208\n        this.optimized = null;                                                                                         // 1209\n        this.activate = network.data.check_activation;                                                                 // 1210\n        this.propagate = network.data.check_propagation;                                                               // 1211\n      }                                                                                                                // 1212\n    }                                                                                                                  // 1213\n                                                                                                                       // 1214\n    this.optimized = network;                                                                                          // 1215\n    this.activate = network.activate;                                                                                  // 1216\n    this.propagate = network.propagate;                                                                                // 1217\n  },                                                                                                                   // 1218\n                                                                                                                       // 1219\n  // restores all the values from the optimized network the their respective objects in order to manipulate the network\n  restore: function() {                                                                                                // 1221\n    if (!this.optimized)                                                                                               // 1222\n      return;                                                                                                          // 1223\n                                                                                                                       // 1224\n    var optimized = this.optimized;                                                                                    // 1225\n                                                                                                                       // 1226\n    var getValue = function() {                                                                                        // 1227\n      var args = Array.prototype.slice.call(arguments);                                                                // 1228\n                                                                                                                       // 1229\n      var unit = args.shift();                                                                                         // 1230\n      var prop = args.pop();                                                                                           // 1231\n                                                                                                                       // 1232\n      var id = prop + '_';                                                                                             // 1233\n      for (var property in args)                                                                                       // 1234\n        id += args[property] + '_';                                                                                    // 1235\n      id += unit.ID;                                                                                                   // 1236\n                                                                                                                       // 1237\n      var memory = optimized.memory;                                                                                   // 1238\n      var variables = optimized.data.variables;                                                                        // 1239\n                                                                                                                       // 1240\n      if (id in variables)                                                                                             // 1241\n        return memory[variables[id].id];                                                                               // 1242\n      return 0;                                                                                                        // 1243\n    }                                                                                                                  // 1244\n                                                                                                                       // 1245\n    var list = this.neurons();                                                                                         // 1246\n                                                                                                                       // 1247\n    // link id's to positions in the array                                                                             // 1248\n    var ids = {};                                                                                                      // 1249\n    for (var i in list) {                                                                                              // 1250\n      var neuron = list[i].neuron;                                                                                     // 1251\n      while (neuron.neuron)                                                                                            // 1252\n        neuron = neuron.neuron;                                                                                        // 1253\n                                                                                                                       // 1254\n      neuron.state = getValue(neuron, 'state');                                                                        // 1255\n      neuron.old = getValue(neuron, 'old');                                                                            // 1256\n      neuron.activation = getValue(neuron, 'activation');                                                              // 1257\n      neuron.bias = getValue(neuron, 'bias');                                                                          // 1258\n                                                                                                                       // 1259\n      for (var input in neuron.trace.elegibility)                                                                      // 1260\n        neuron.trace.elegibility[input] = getValue(neuron, 'trace',                                                    // 1261\n          'elegibility', input);                                                                                       // 1262\n                                                                                                                       // 1263\n      for (var gated in neuron.trace.extended)                                                                         // 1264\n        for (var input in neuron.trace.extended[gated])                                                                // 1265\n          neuron.trace.extended[gated][input] = getValue(neuron, 'trace',                                              // 1266\n            'extended', gated, input);                                                                                 // 1267\n    }                                                                                                                  // 1268\n                                                                                                                       // 1269\n    // get connections                                                                                                 // 1270\n    for (var i in list) {                                                                                              // 1271\n      var neuron = list[i].neuron;                                                                                     // 1272\n      while (neuron.neuron)                                                                                            // 1273\n        neuron = neuron.neuron;                                                                                        // 1274\n                                                                                                                       // 1275\n      for (var j in neuron.connections.projected) {                                                                    // 1276\n        var connection = neuron.connections.projected[j];                                                              // 1277\n        connection.weight = getValue(connection, 'weight');                                                            // 1278\n        connection.gain = getValue(connection, 'gain');                                                                // 1279\n      }                                                                                                                // 1280\n    }                                                                                                                  // 1281\n  },                                                                                                                   // 1282\n                                                                                                                       // 1283\n  // returns all the neurons in the network                                                                            // 1284\n  neurons: function() {                                                                                                // 1285\n                                                                                                                       // 1286\n    var neurons = [];                                                                                                  // 1287\n                                                                                                                       // 1288\n    var inputLayer = this.layers.input.neurons(),                                                                      // 1289\n      outputLayer = this.layers.output.neurons();                                                                      // 1290\n                                                                                                                       // 1291\n    for (var neuron in inputLayer)                                                                                     // 1292\n      neurons.push({                                                                                                   // 1293\n        neuron: inputLayer[neuron],                                                                                    // 1294\n        layer: 'input'                                                                                                 // 1295\n      });                                                                                                              // 1296\n                                                                                                                       // 1297\n    for (var layer in this.layers.hidden) {                                                                            // 1298\n      var hiddenLayer = this.layers.hidden[layer].neurons();                                                           // 1299\n      for (var neuron in hiddenLayer)                                                                                  // 1300\n        neurons.push({                                                                                                 // 1301\n          neuron: hiddenLayer[neuron],                                                                                 // 1302\n          layer: layer                                                                                                 // 1303\n        });                                                                                                            // 1304\n    }                                                                                                                  // 1305\n    for (var neuron in outputLayer)                                                                                    // 1306\n      neurons.push({                                                                                                   // 1307\n        neuron: outputLayer[neuron],                                                                                   // 1308\n        layer: 'output'                                                                                                // 1309\n      });                                                                                                              // 1310\n                                                                                                                       // 1311\n    return neurons;                                                                                                    // 1312\n  },                                                                                                                   // 1313\n                                                                                                                       // 1314\n  // returns number of inputs of the network                                                                           // 1315\n  inputs: function() {                                                                                                 // 1316\n    return this.layers.input.size;                                                                                     // 1317\n  },                                                                                                                   // 1318\n                                                                                                                       // 1319\n  // returns number of outputs of hte network                                                                          // 1320\n  outputs: function() {                                                                                                // 1321\n    return this.layers.output.size;                                                                                    // 1322\n  },                                                                                                                   // 1323\n                                                                                                                       // 1324\n  // sets the layers of the network                                                                                    // 1325\n  set: function(layers) {                                                                                              // 1326\n                                                                                                                       // 1327\n    this.layers = layers;                                                                                              // 1328\n    if (this.optimized)                                                                                                // 1329\n      this.optimized.reset();                                                                                          // 1330\n  },                                                                                                                   // 1331\n                                                                                                                       // 1332\n  // returns a json that represents all the neurons and connections of the network                                     // 1333\n  toJSON: function(ignoreTraces) {                                                                                     // 1334\n                                                                                                                       // 1335\n    this.restore();                                                                                                    // 1336\n                                                                                                                       // 1337\n    var list = this.neurons();                                                                                         // 1338\n    var neurons = [];                                                                                                  // 1339\n    var connections = [];                                                                                              // 1340\n                                                                                                                       // 1341\n    // link id's to positions in the array                                                                             // 1342\n    var ids = {};                                                                                                      // 1343\n    for (var i in list) {                                                                                              // 1344\n      var neuron = list[i].neuron;                                                                                     // 1345\n      while (neuron.neuron)                                                                                            // 1346\n        neuron = neuron.neuron;                                                                                        // 1347\n      ids[neuron.ID] = i;                                                                                              // 1348\n                                                                                                                       // 1349\n      var copy = {                                                                                                     // 1350\n        trace: {                                                                                                       // 1351\n          elegibility: {},                                                                                             // 1352\n          extended: {}                                                                                                 // 1353\n        },                                                                                                             // 1354\n        state: neuron.state,                                                                                           // 1355\n        old: neuron.old,                                                                                               // 1356\n        activation: neuron.activation,                                                                                 // 1357\n        bias: neuron.bias,                                                                                             // 1358\n        layer: list[i].layer                                                                                           // 1359\n      };                                                                                                               // 1360\n                                                                                                                       // 1361\n      copy.squash = neuron.squash == Neuron.squash.LOGISTIC ? \"LOGISTIC\" :                                             // 1362\n        neuron.squash == Neuron.squash.TANH ? \"TANH\" :                                                                 // 1363\n        neuron.squash == Neuron.squash.IDENTITY ? \"IDENTITY\" :                                                         // 1364\n        neuron.squash == Neuron.squash.HLIM ? \"HLIM\" :                                                                 // 1365\n        null;                                                                                                          // 1366\n                                                                                                                       // 1367\n      neurons.push(copy);                                                                                              // 1368\n    }                                                                                                                  // 1369\n                                                                                                                       // 1370\n    if (!ignoreTraces)                                                                                                 // 1371\n      for (var i in neurons) {                                                                                         // 1372\n        var copy = neurons[i];                                                                                         // 1373\n                                                                                                                       // 1374\n        for (var input in neuron.trace.elegibility)                                                                    // 1375\n          copy.trace.elegibility[input] = neuron.trace.elegibility[input];                                             // 1376\n                                                                                                                       // 1377\n        for (var gated in neuron.trace.extended) {                                                                     // 1378\n          copy.trace.extended[gated] = {};                                                                             // 1379\n          for (var input in neuron.trace.extended[gated])                                                              // 1380\n            copy.trace.extended[ids[gated]][input] = neuron.trace.extended[                                            // 1381\n              gated][input];                                                                                           // 1382\n        }                                                                                                              // 1383\n      }                                                                                                                // 1384\n                                                                                                                       // 1385\n    // get connections                                                                                                 // 1386\n    for (var i in list) {                                                                                              // 1387\n      var neuron = list[i].neuron;                                                                                     // 1388\n      while (neuron.neuron)                                                                                            // 1389\n        neuron = neuron.neuron;                                                                                        // 1390\n                                                                                                                       // 1391\n      for (var j in neuron.connections.projected) {                                                                    // 1392\n        var connection = neuron.connections.projected[j];                                                              // 1393\n        connections.push({                                                                                             // 1394\n          from: ids[connection.from.ID],                                                                               // 1395\n          to: ids[connection.to.ID],                                                                                   // 1396\n          weight: connection.weight,                                                                                   // 1397\n          gater: connection.gater ? ids[connection.gater.ID] : null,                                                   // 1398\n        });                                                                                                            // 1399\n      }                                                                                                                // 1400\n      if (neuron.selfconnected())                                                                                      // 1401\n        connections.push({                                                                                             // 1402\n          from: ids[neuron.ID],                                                                                        // 1403\n          to: ids[neuron.ID],                                                                                          // 1404\n          weight: neuron.selfconnection.weight,                                                                        // 1405\n          gater: neuron.selfconnection.gater ? ids[neuron.selfconnection.gater                                         // 1406\n            .ID] : null,                                                                                               // 1407\n        });                                                                                                            // 1408\n    }                                                                                                                  // 1409\n                                                                                                                       // 1410\n    return {                                                                                                           // 1411\n      neurons: neurons,                                                                                                // 1412\n      connections: connections                                                                                         // 1413\n    }                                                                                                                  // 1414\n  },                                                                                                                   // 1415\n                                                                                                                       // 1416\n  // returns a function that works as the activation of the network and can be used without depending on the library   // 1417\n  standalone: function() {                                                                                             // 1418\n    if (!this.optimized)                                                                                               // 1419\n      this.optimize();                                                                                                 // 1420\n                                                                                                                       // 1421\n    var data = this.optimized.data;                                                                                    // 1422\n                                                                                                                       // 1423\n    // build activation function                                                                                       // 1424\n    var activation = \"function (input) {\\n\";                                                                           // 1425\n                                                                                                                       // 1426\n    // build inputs                                                                                                    // 1427\n    for (var i in data.inputs)                                                                                         // 1428\n      activation += \"F[\" + data.inputs[i] + \"] = input[\" + i + \"];\\n\";                                                 // 1429\n                                                                                                                       // 1430\n    // build network activation                                                                                        // 1431\n    for (var neuron in data.activate)                                                                                  // 1432\n      for (var sentence in data.activate[neuron])                                                                      // 1433\n        activation += data.activate[neuron][sentence] + \"\\n\";                                                          // 1434\n                                                                                                                       // 1435\n    // build outputs                                                                                                   // 1436\n    activation += \"var output = [];\\n\";                                                                                // 1437\n    for (var i in data.outputs)                                                                                        // 1438\n      activation += \"output[\" + i + \"] = F[\" + data.outputs[i] + \"];\\n\";                                               // 1439\n    activation += \"return output;\\n}\";                                                                                 // 1440\n                                                                                                                       // 1441\n    // reference all the positions in memory                                                                           // 1442\n    var memory = activation.match(/F\\[(\\d+)\\]/g);                                                                      // 1443\n    var dimension = 0;                                                                                                 // 1444\n    var ids = {};                                                                                                      // 1445\n    for (var address in memory) {                                                                                      // 1446\n      var tmp = memory[address].match(/\\d+/)[0];                                                                       // 1447\n      if (!(tmp in ids)) {                                                                                             // 1448\n        ids[tmp] = dimension++;                                                                                        // 1449\n      }                                                                                                                // 1450\n    }                                                                                                                  // 1451\n    var hardcode = \"F = {\\n\";                                                                                          // 1452\n    for (var i in ids)                                                                                                 // 1453\n      hardcode += ids[i] + \": \" + this.optimized.memory[i] + \",\\n\";                                                    // 1454\n    hardcode = hardcode.substring(0, hardcode.length - 2) + \"\\n};\\n\";                                                  // 1455\n    hardcode = \"var run = \" + activation.replace(/F\\[(\\d+)]/g, function(                                               // 1456\n      index) {                                                                                                         // 1457\n      return 'F[' + ids[index.match(/\\d+/)[0]] + ']'                                                                   // 1458\n    }).replace(\"{\\n\", \"{\\n\" + hardcode + \"\") + \";\\n\";                                                                  // 1459\n    hardcode += \"return run\";                                                                                          // 1460\n                                                                                                                       // 1461\n    // return standalone function                                                                                      // 1462\n    return new Function(hardcode)();                                                                                   // 1463\n  },                                                                                                                   // 1464\n                                                                                                                       // 1465\n  worker: function() {                                                                                                 // 1466\n    if (!this.optimized)                                                                                               // 1467\n      this.optimize();                                                                                                 // 1468\n                                                                                                                       // 1469\n    var hardcode = \"var inputs = \" + this.optimized.data.inputs.length +                                               // 1470\n      \";\\n\";                                                                                                           // 1471\n    hardcode += \"var outputs = \" + this.optimized.data.outputs.length +                                                // 1472\n      \";\\n\";                                                                                                           // 1473\n    hardcode += \"var F = null;\\n\";                                                                                     // 1474\n    hardcode += \"var activate = \" + this.optimized.activate.toString() +                                               // 1475\n      \";\\n\";                                                                                                           // 1476\n    hardcode += \"var propagate = \" + this.optimized.propagate.toString() +                                             // 1477\n      \";\\n\";                                                                                                           // 1478\n    hardcode += \"onmessage = function(e){\\n\";                                                                          // 1479\n    hardcode += \"F = e.data.memoryBuffer;\\n\";                                                                          // 1480\n    hardcode += \"if (e.data.action == 'activate'){\\n\";                                                                 // 1481\n    hardcode += \"if (e.data.input.length == inputs){\\n\";                                                               // 1482\n    hardcode +=                                                                                                        // 1483\n      \"postMessage( { action: 'activate', output: activate(e.data.input), memoryBuffer: F }, [F.buffer]);\\n\";          // 1484\n    hardcode += \"}\\n}\\nelse if (e.data.action == 'propagate'){\\n\";                                                     // 1485\n    hardcode += \"propagate(e.data.rate, e.data.target);\\n\";                                                            // 1486\n    hardcode +=                                                                                                        // 1487\n      \"postMessage({ action: 'propagate', memoryBuffer: F }, [F.buffer]);\\n\";                                          // 1488\n    hardcode += \"}\\n}\\n\";                                                                                              // 1489\n                                                                                                                       // 1490\n    var blob = new Blob([hardcode]);                                                                                   // 1491\n    var blobURL = window.URL.createObjectURL(blob);                                                                    // 1492\n                                                                                                                       // 1493\n    return new Worker(blobURL);                                                                                        // 1494\n  },                                                                                                                   // 1495\n                                                                                                                       // 1496\n  // returns a copy of the network                                                                                     // 1497\n  clone: function(ignoreTraces) {                                                                                      // 1498\n    return Network.fromJSON(this.toJSON(ignoreTraces));                                                                // 1499\n  }                                                                                                                    // 1500\n}                                                                                                                      // 1501\n                                                                                                                       // 1502\n// rebuild a network that has been stored in a json using the method toJson()                                          // 1503\nNetwork.fromJSON = function(json) {                                                                                    // 1504\n                                                                                                                       // 1505\n  var neurons = [];                                                                                                    // 1506\n                                                                                                                       // 1507\n  var layers = {                                                                                                       // 1508\n    input: new Layer(),                                                                                                // 1509\n    hidden: [],                                                                                                        // 1510\n    output: new Layer()                                                                                                // 1511\n  }                                                                                                                    // 1512\n                                                                                                                       // 1513\n  for (var i in json.neurons) {                                                                                        // 1514\n    var config = json.neurons[i];                                                                                      // 1515\n                                                                                                                       // 1516\n    var neuron = new Neuron();                                                                                         // 1517\n    neuron.trace.elegibility = config.trace.elegibility;                                                               // 1518\n    neuron.trace.extended = config.trace.extended;                                                                     // 1519\n    neuron.state = config.state;                                                                                       // 1520\n    neuron.old = config.old;                                                                                           // 1521\n    neuron.activation = config.activation;                                                                             // 1522\n    neuron.bias = config.bias;                                                                                         // 1523\n    neuron.squash = config.squash in Neuron.squash ? Neuron.squash[config.squash] :                                    // 1524\n      Neuron.squash.LOGISTIC;                                                                                          // 1525\n    neurons.push(neuron);                                                                                              // 1526\n                                                                                                                       // 1527\n    if (config.layer == 'input')                                                                                       // 1528\n      layers.input.add(neuron);                                                                                        // 1529\n    else if (config.layer == 'output')                                                                                 // 1530\n      layers.output.add(neuron);                                                                                       // 1531\n    else {                                                                                                             // 1532\n      if (typeof layers.hidden[config.layer] == 'undefined')                                                           // 1533\n        layers.hidden[config.layer] = new Layer();                                                                     // 1534\n      layers.hidden[config.layer].add(neuron);                                                                         // 1535\n    }                                                                                                                  // 1536\n  }                                                                                                                    // 1537\n                                                                                                                       // 1538\n  for (var i in json.connections) {                                                                                    // 1539\n    var config = json.connections[i];                                                                                  // 1540\n    var from = neurons[config.from];                                                                                   // 1541\n    var to = neurons[config.to];                                                                                       // 1542\n    var weight = config.weight                                                                                         // 1543\n    var gater = neurons[config.gater];                                                                                 // 1544\n                                                                                                                       // 1545\n    var connection = from.project(to, weight);                                                                         // 1546\n    if (gater)                                                                                                         // 1547\n      gater.gate(connection);                                                                                          // 1548\n  }                                                                                                                    // 1549\n                                                                                                                       // 1550\n  return new Network(layers);                                                                                          // 1551\n}                                                                                                                      // 1552\n                                                                                                                       // 1553\n                                                                                                                       // 1554\n/*******************************************************************************************                           // 1555\n                                        TRAINER                                                                        // 1556\n*******************************************************************************************/                           // 1557\n                                                                                                                       // 1558\nfunction Trainer(network, options) {                                                                                   // 1559\n  options = options || {};                                                                                             // 1560\n  this.network = network;                                                                                              // 1561\n  this.rate = options.rate || .1;                                                                                      // 1562\n  this.iterations = options.iterations || 100000;                                                                      // 1563\n  this.error = options.error || .005                                                                                   // 1564\n}                                                                                                                      // 1565\nTrainer.prototype = {                                                                                                  // 1566\n                                                                                                                       // 1567\n  // trains any given set to a network                                                                                 // 1568\n  train: function(set, options) {                                                                                      // 1569\n                                                                                                                       // 1570\n    var error = 1;                                                                                                     // 1571\n    var iterations = 0;                                                                                                // 1572\n    var input, output, target;                                                                                         // 1573\n                                                                                                                       // 1574\n    var start = Date.now();                                                                                            // 1575\n                                                                                                                       // 1576\n    if (options) {                                                                                                     // 1577\n      if (options.shuffle) {                                                                                           // 1578\n        //+ Jonas Raoni Soares Silva                                                                                   // 1579\n        //@ http://jsfromhell.com/array/shuffle [v1.0]                                                                 // 1580\n        function shuffle(o) { //v1.0                                                                                   // 1581\n          for (var j, x, i = o.length; i; j = Math.floor(Math.random() *                                               // 1582\n              i), x = o[--i], o[i] = o[j], o[j] = x);                                                                  // 1583\n          return o;                                                                                                    // 1584\n        };                                                                                                             // 1585\n      }                                                                                                                // 1586\n      if (options.iterations)                                                                                          // 1587\n        this.iterations = options.iterations;                                                                          // 1588\n      if (options.error)                                                                                               // 1589\n        this.error = options.error;                                                                                    // 1590\n      if (options.rate)                                                                                                // 1591\n        this.rate = options.rate;                                                                                      // 1592\n    }                                                                                                                  // 1593\n                                                                                                                       // 1594\n    while (iterations < this.iterations && error > this.error) {                                                       // 1595\n      error = 0;                                                                                                       // 1596\n                                                                                                                       // 1597\n      for (var train in set) {                                                                                         // 1598\n        input = set[train].input;                                                                                      // 1599\n        target = set[train].output;                                                                                    // 1600\n                                                                                                                       // 1601\n        output = this.network.activate(input);                                                                         // 1602\n        this.network.propagate(this.rate, target);                                                                     // 1603\n                                                                                                                       // 1604\n        var delta = 0;                                                                                                 // 1605\n        for (var i in output)                                                                                          // 1606\n          delta += Math.pow(target[i] - output[i], 2);                                                                 // 1607\n                                                                                                                       // 1608\n        error += delta / output.length;                                                                                // 1609\n      }                                                                                                                // 1610\n                                                                                                                       // 1611\n      // check error                                                                                                   // 1612\n      iterations++;                                                                                                    // 1613\n      error /= set.length;                                                                                             // 1614\n                                                                                                                       // 1615\n      if (options) {                                                                                                   // 1616\n        if (options.customLog && options.customLog.every && iterations %                                               // 1617\n          options.customLog.every == 0)                                                                                // 1618\n          options.customLog.do({                                                                                       // 1619\n            error: error,                                                                                              // 1620\n            iterations: iterations                                                                                     // 1621\n          });                                                                                                          // 1622\n        else if (options.log && iterations % options.log == 0) {                                                       // 1623\n          console.log('iterations', iterations, 'error', error);                                                       // 1624\n        };                                                                                                             // 1625\n        if (options.shuffle)                                                                                           // 1626\n          shuffle(set);                                                                                                // 1627\n      }                                                                                                                // 1628\n    }                                                                                                                  // 1629\n                                                                                                                       // 1630\n    var results = {                                                                                                    // 1631\n      error: error,                                                                                                    // 1632\n      iterations: iterations,                                                                                          // 1633\n      time: Date.now() - start                                                                                         // 1634\n    }                                                                                                                  // 1635\n                                                                                                                       // 1636\n    return results;                                                                                                    // 1637\n  },                                                                                                                   // 1638\n                                                                                                                       // 1639\n  // trains an XOR to the network                                                                                      // 1640\n  XOR: function(options) {                                                                                             // 1641\n                                                                                                                       // 1642\n    if (this.network.inputs() != 2 || this.network.outputs() != 1)                                                     // 1643\n      throw \"Error: Incompatible network (2 inputs, 1 output)\";                                                        // 1644\n                                                                                                                       // 1645\n    var defaults = {                                                                                                   // 1646\n      iterations: 100000,                                                                                              // 1647\n      log: false,                                                                                                      // 1648\n      shuffle: true                                                                                                    // 1649\n    }                                                                                                                  // 1650\n                                                                                                                       // 1651\n    if (options)                                                                                                       // 1652\n      for (var i in options)                                                                                           // 1653\n        defaults[i] = options[i];                                                                                      // 1654\n                                                                                                                       // 1655\n    return this.train([{                                                                                               // 1656\n      input: [0, 0],                                                                                                   // 1657\n      output: [0]                                                                                                      // 1658\n    }, {                                                                                                               // 1659\n      input: [1, 0],                                                                                                   // 1660\n      output: [1]                                                                                                      // 1661\n    }, {                                                                                                               // 1662\n      input: [0, 1],                                                                                                   // 1663\n      output: [1]                                                                                                      // 1664\n    }, {                                                                                                               // 1665\n      input: [1, 1],                                                                                                   // 1666\n      output: [0]                                                                                                      // 1667\n    }], defaults);                                                                                                     // 1668\n  },                                                                                                                   // 1669\n                                                                                                                       // 1670\n  // trains the network to pass a Distracted Sequence Recall test                                                      // 1671\n  DSR: function(options) {                                                                                             // 1672\n    options = options || {};                                                                                           // 1673\n                                                                                                                       // 1674\n    var targets = options.targets || [2, 4, 7, 8];                                                                     // 1675\n    var distractors = options.distractors || [3, 5, 6, 9];                                                             // 1676\n    var prompts = options.prompts || [0, 1];                                                                           // 1677\n    var length = options.length || 24;                                                                                 // 1678\n    var criterion = options.success || 0.95;                                                                           // 1679\n    var iterations = options.iterations || 100000;                                                                     // 1680\n    var rate = options.rate || .1;                                                                                     // 1681\n    var log = options.log || 0;                                                                                        // 1682\n    var customLog = options.customLog || {};                                                                           // 1683\n                                                                                                                       // 1684\n    var trial = correct = i = j = success = 0,                                                                         // 1685\n      error = 1,                                                                                                       // 1686\n      symbols = targets.length + distractors.length + prompts.length;                                                  // 1687\n                                                                                                                       // 1688\n    var noRepeat = function(range, avoid) {                                                                            // 1689\n      var number = Math.random() * range | 0;                                                                          // 1690\n      var used = false;                                                                                                // 1691\n      for (var i in avoid)                                                                                             // 1692\n        if (number == avoid[i])                                                                                        // 1693\n          used = true;                                                                                                 // 1694\n      return used ? noRepeat(range, avoid) : number;                                                                   // 1695\n    }                                                                                                                  // 1696\n                                                                                                                       // 1697\n    var equal = function(prediction, output) {                                                                         // 1698\n      for (var i in prediction)                                                                                        // 1699\n        if (Math.round(prediction[i]) != output[i])                                                                    // 1700\n          return false;                                                                                                // 1701\n      return true;                                                                                                     // 1702\n    }                                                                                                                  // 1703\n                                                                                                                       // 1704\n    var start = Date.now();                                                                                            // 1705\n                                                                                                                       // 1706\n    while (trial < iterations && (success < criterion || trial % 1000 != 0)) {                                         // 1707\n      // generate sequence                                                                                             // 1708\n      var sequence = [],                                                                                               // 1709\n        sequenceLength = length - prompts.length;                                                                      // 1710\n      for (i = 0; i < sequenceLength; i++) {                                                                           // 1711\n        var any = Math.random() * distractors.length | 0;                                                              // 1712\n        sequence.push(distractors[any]);                                                                               // 1713\n      }                                                                                                                // 1714\n      var indexes = [],                                                                                                // 1715\n        positions = [];                                                                                                // 1716\n      for (i = 0; i < prompts.length; i++) {                                                                           // 1717\n        indexes.push(Math.random() * targets.length | 0);                                                              // 1718\n        positions.push(noRepeat(sequenceLength, positions));                                                           // 1719\n      }                                                                                                                // 1720\n      positions = positions.sort();                                                                                    // 1721\n      for (i = 0; i < prompts.length; i++) {                                                                           // 1722\n        sequence[positions[i]] = targets[indexes[i]];                                                                  // 1723\n        sequence.push(prompts[i]);                                                                                     // 1724\n      }                                                                                                                // 1725\n                                                                                                                       // 1726\n      //train sequence                                                                                                 // 1727\n      var targetsCorrect = distractorsCorrect = 0;                                                                     // 1728\n      error = 0;                                                                                                       // 1729\n      for (i = 0; i < length; i++) {                                                                                   // 1730\n        // generate input from sequence                                                                                // 1731\n        var input = [];                                                                                                // 1732\n        for (j = 0; j < symbols; j++)                                                                                  // 1733\n          input[j] = 0;                                                                                                // 1734\n        input[sequence[i]] = 1;                                                                                        // 1735\n                                                                                                                       // 1736\n        // generate target output                                                                                      // 1737\n        var output = [];                                                                                               // 1738\n        for (j = 0; j < targets.length; j++)                                                                           // 1739\n          output[j] = 0;                                                                                               // 1740\n                                                                                                                       // 1741\n        if (i >= sequenceLength) {                                                                                     // 1742\n          var index = i - sequenceLength;                                                                              // 1743\n          output[indexes[index]] = 1;                                                                                  // 1744\n        }                                                                                                              // 1745\n                                                                                                                       // 1746\n        // check result                                                                                                // 1747\n        var prediction = this.network.activate(input);                                                                 // 1748\n                                                                                                                       // 1749\n        if (equal(prediction, output))                                                                                 // 1750\n          if (i < sequenceLength)                                                                                      // 1751\n            distractorsCorrect++;                                                                                      // 1752\n          else                                                                                                         // 1753\n            targetsCorrect++;                                                                                          // 1754\n        else {                                                                                                         // 1755\n          this.network.propagate(rate, output);                                                                        // 1756\n        }                                                                                                              // 1757\n                                                                                                                       // 1758\n        var delta = 0;                                                                                                 // 1759\n        for (var j in prediction)                                                                                      // 1760\n          delta += Math.pow(output[j] - prediction[j], 2);                                                             // 1761\n        error += delta / this.network.outputs();                                                                       // 1762\n                                                                                                                       // 1763\n        if (distractorsCorrect + targetsCorrect == length)                                                             // 1764\n          correct++;                                                                                                   // 1765\n      }                                                                                                                // 1766\n                                                                                                                       // 1767\n      // calculate error                                                                                               // 1768\n      if (trial % 1000 == 0)                                                                                           // 1769\n        correct = 0;                                                                                                   // 1770\n      trial++;                                                                                                         // 1771\n      var divideError = trial % 1000;                                                                                  // 1772\n      divideError = divideError == 0 ? 1000 : divideError;                                                             // 1773\n      success = correct / divideError;                                                                                 // 1774\n      error /= length;                                                                                                 // 1775\n                                                                                                                       // 1776\n      // log                                                                                                           // 1777\n      if (log && trial % log == 0)                                                                                     // 1778\n        console.log(\"iterations:\", trial, \" success:\", success, \" correct:\",                                           // 1779\n          correct, \" time:\", Date.now() - start, \" error:\", error);                                                    // 1780\n      if (customLog.do && customLog.every && trial % customLog.every == 0)                                             // 1781\n        customLog.do({                                                                                                 // 1782\n          iterations: trial,                                                                                           // 1783\n          success: success,                                                                                            // 1784\n          error: error,                                                                                                // 1785\n          time: Date.now() - start,                                                                                    // 1786\n          correct: correct                                                                                             // 1787\n        });                                                                                                            // 1788\n    }                                                                                                                  // 1789\n                                                                                                                       // 1790\n    return {                                                                                                           // 1791\n      iterations: trial,                                                                                               // 1792\n      success: success,                                                                                                // 1793\n      error: error,                                                                                                    // 1794\n      time: Date.now() - start                                                                                         // 1795\n    }                                                                                                                  // 1796\n  },                                                                                                                   // 1797\n                                                                                                                       // 1798\n  // train the network to learn an Embeded Reber Grammar                                                               // 1799\n  ERG: function(options) {                                                                                             // 1800\n                                                                                                                       // 1801\n    options = options || {};                                                                                           // 1802\n    var iterations = options.iterations || 150000;                                                                     // 1803\n    var criterion = options.error || .05;                                                                              // 1804\n    var rate = options.rate || .1;                                                                                     // 1805\n    var log = options.log || 500;                                                                                      // 1806\n                                                                                                                       // 1807\n    // gramar node                                                                                                     // 1808\n    var Node = function() {                                                                                            // 1809\n      this.paths = [];                                                                                                 // 1810\n    }                                                                                                                  // 1811\n    Node.prototype = {                                                                                                 // 1812\n      connect: function(node, value) {                                                                                 // 1813\n        this.paths.push({                                                                                              // 1814\n          node: node,                                                                                                  // 1815\n          value: value                                                                                                 // 1816\n        });                                                                                                            // 1817\n        return this;                                                                                                   // 1818\n      },                                                                                                               // 1819\n      any: function() {                                                                                                // 1820\n        if (this.paths.length == 0)                                                                                    // 1821\n          return false;                                                                                                // 1822\n        var index = Math.random() * this.paths.length | 0;                                                             // 1823\n        return this.paths[index];                                                                                      // 1824\n      },                                                                                                               // 1825\n      test: function(value) {                                                                                          // 1826\n        for (var i in this.paths)                                                                                      // 1827\n          if (this.paths[i].value == value)                                                                            // 1828\n            return this.paths[i];                                                                                      // 1829\n        return false;                                                                                                  // 1830\n      }                                                                                                                // 1831\n    }                                                                                                                  // 1832\n                                                                                                                       // 1833\n    var reberGrammar = function() {                                                                                    // 1834\n                                                                                                                       // 1835\n      // build a reber grammar                                                                                         // 1836\n      var output = new Node();                                                                                         // 1837\n      var n1 = (new Node()).connect(output, \"E\");                                                                      // 1838\n      var n2 = (new Node()).connect(n1, \"S\");                                                                          // 1839\n      var n3 = (new Node()).connect(n1, \"V\").connect(n2, \"P\");                                                         // 1840\n      var n4 = (new Node()).connect(n2, \"X\")                                                                           // 1841\n      n4.connect(n4, \"S\");                                                                                             // 1842\n      var n5 = (new Node()).connect(n3, \"V\")                                                                           // 1843\n      n5.connect(n5, \"T\");                                                                                             // 1844\n      n2.connect(n5, \"X\")                                                                                              // 1845\n      var n6 = (new Node()).connect(n4, \"T\").connect(n5, \"P\");                                                         // 1846\n      var input = (new Node()).connect(n6, \"B\")                                                                        // 1847\n                                                                                                                       // 1848\n      return {                                                                                                         // 1849\n        input: input,                                                                                                  // 1850\n        output: output                                                                                                 // 1851\n      }                                                                                                                // 1852\n    }                                                                                                                  // 1853\n                                                                                                                       // 1854\n    // build an embeded reber grammar                                                                                  // 1855\n    var embededReberGrammar = function() {                                                                             // 1856\n      var reber1 = reberGrammar();                                                                                     // 1857\n      var reber2 = reberGrammar();                                                                                     // 1858\n                                                                                                                       // 1859\n      var output = new Node();                                                                                         // 1860\n      var n1 = (new Node).connect(output, \"E\");                                                                        // 1861\n      reber1.output.connect(n1, \"T\");                                                                                  // 1862\n      reber2.output.connect(n1, \"P\");                                                                                  // 1863\n      var n2 = (new Node).connect(reber1.input, \"P\").connect(reber2.input,                                             // 1864\n        \"T\");                                                                                                          // 1865\n      var input = (new Node).connect(n2, \"B\");                                                                         // 1866\n                                                                                                                       // 1867\n      return {                                                                                                         // 1868\n        input: input,                                                                                                  // 1869\n        output: output                                                                                                 // 1870\n      }                                                                                                                // 1871\n                                                                                                                       // 1872\n    }                                                                                                                  // 1873\n                                                                                                                       // 1874\n    // generate an ERG sequence                                                                                        // 1875\n    var generate = function() {                                                                                        // 1876\n      var node = embededReberGrammar().input;                                                                          // 1877\n      var next = node.any();                                                                                           // 1878\n      var str = \"\";                                                                                                    // 1879\n      while (next) {                                                                                                   // 1880\n        str += next.value;                                                                                             // 1881\n        next = next.node.any();                                                                                        // 1882\n      }                                                                                                                // 1883\n      return str;                                                                                                      // 1884\n    }                                                                                                                  // 1885\n                                                                                                                       // 1886\n    // test if a string matches an embeded reber grammar                                                               // 1887\n    var test = function(str) {                                                                                         // 1888\n      var node = embededReberGrammar().input;                                                                          // 1889\n      var i = 0;                                                                                                       // 1890\n      var ch = str.charAt(i);                                                                                          // 1891\n      while (i < str.length) {                                                                                         // 1892\n        var next = node.test(ch);                                                                                      // 1893\n        if (!next)                                                                                                     // 1894\n          return false;                                                                                                // 1895\n        node = next.node;                                                                                              // 1896\n        ch = str.charAt(++i);                                                                                          // 1897\n      }                                                                                                                // 1898\n      return true;                                                                                                     // 1899\n    }                                                                                                                  // 1900\n                                                                                                                       // 1901\n    // helper to check if the output and the target vectors match                                                      // 1902\n    var different = function(array1, array2) {                                                                         // 1903\n      var max1 = 0;                                                                                                    // 1904\n      var i1 = -1;                                                                                                     // 1905\n      var max2 = 0;                                                                                                    // 1906\n      var i2 = -1;                                                                                                     // 1907\n      for (var i in array1) {                                                                                          // 1908\n        if (array1[i] > max1) {                                                                                        // 1909\n          max1 = array1[i];                                                                                            // 1910\n          i1 = i;                                                                                                      // 1911\n        }                                                                                                              // 1912\n        if (array2[i] > max2) {                                                                                        // 1913\n          max2 = array2[i];                                                                                            // 1914\n          i2 = i;                                                                                                      // 1915\n        }                                                                                                              // 1916\n      }                                                                                                                // 1917\n                                                                                                                       // 1918\n      return i1 != i2;                                                                                                 // 1919\n    }                                                                                                                  // 1920\n                                                                                                                       // 1921\n    var iteration = 0;                                                                                                 // 1922\n    var error = 1;                                                                                                     // 1923\n    var table = {                                                                                                      // 1924\n      \"B\": 0,                                                                                                          // 1925\n      \"P\": 1,                                                                                                          // 1926\n      \"T\": 2,                                                                                                          // 1927\n      \"X\": 3,                                                                                                          // 1928\n      \"S\": 4,                                                                                                          // 1929\n      \"E\": 5                                                                                                           // 1930\n    }                                                                                                                  // 1931\n                                                                                                                       // 1932\n    var start = Date.now();                                                                                            // 1933\n    while (iteration < iterations && error > criterion) {                                                              // 1934\n      var i = 0;                                                                                                       // 1935\n      error = 0;                                                                                                       // 1936\n                                                                                                                       // 1937\n      // ERG sequence to learn                                                                                         // 1938\n      var sequence = generate();                                                                                       // 1939\n                                                                                                                       // 1940\n      // input                                                                                                         // 1941\n      var read = sequence.charAt(i);                                                                                   // 1942\n      // target                                                                                                        // 1943\n      var predict = sequence.charAt(i + 1);                                                                            // 1944\n                                                                                                                       // 1945\n      // train                                                                                                         // 1946\n      while (i < sequence.length - 1) {                                                                                // 1947\n        var input = [];                                                                                                // 1948\n        var target = [];                                                                                               // 1949\n        for (var j = 0; j < 6; j++) {                                                                                  // 1950\n          input[j] = 0;                                                                                                // 1951\n          target[j] = 0;                                                                                               // 1952\n        }                                                                                                              // 1953\n        input[table[read]] = 1;                                                                                        // 1954\n        target[table[predict]] = 1;                                                                                    // 1955\n                                                                                                                       // 1956\n        var output = this.network.activate(input);                                                                     // 1957\n                                                                                                                       // 1958\n        if (different(output, target))                                                                                 // 1959\n          this.network.propagate(rate, target);                                                                        // 1960\n                                                                                                                       // 1961\n        read = sequence.charAt(++i);                                                                                   // 1962\n        predict = sequence.charAt(i + 1);                                                                              // 1963\n                                                                                                                       // 1964\n        var delta = 0;                                                                                                 // 1965\n        for (var k in output)                                                                                          // 1966\n          delta += Math.pow(target[k] - output[k], 2)                                                                  // 1967\n        delta /= output.length;                                                                                        // 1968\n                                                                                                                       // 1969\n        error += delta;                                                                                                // 1970\n      }                                                                                                                // 1971\n      error /= sequence.length;                                                                                        // 1972\n      iteration++;                                                                                                     // 1973\n      if (iteration % log == 0) {                                                                                      // 1974\n        console.log(\"iterations:\", iteration, \" time:\", Date.now() - start,                                            // 1975\n          \" error:\", error);                                                                                           // 1976\n      }                                                                                                                // 1977\n    }                                                                                                                  // 1978\n                                                                                                                       // 1979\n    return {                                                                                                           // 1980\n      iterations: iteration,                                                                                           // 1981\n      error: error,                                                                                                    // 1982\n      time: Date.now() - start,                                                                                        // 1983\n      test: test,                                                                                                      // 1984\n      generate: generate                                                                                               // 1985\n    }                                                                                                                  // 1986\n  }                                                                                                                    // 1987\n};                                                                                                                     // 1988\n                                                                                                                       // 1989\n/*******************************************************************************************                           // 1990\n                                        ARCHITECT                                                                      // 1991\n*******************************************************************************************/                           // 1992\n                                                                                                                       // 1993\n// Colection of useful built-in architectures                                                                          // 1994\nArchitect = {                                                                                                          // 1995\n                                                                                                                       // 1996\n  // Multilayer Perceptron                                                                                             // 1997\n  Perceptron: function Perceptron() {                                                                                  // 1998\n                                                                                                                       // 1999\n    var args = Array.prototype.slice.call(arguments); // convert arguments to Array                                    // 2000\n    if (args.length < 3)                                                                                               // 2001\n      throw \"Error: not enough layers (minimum 3) !!\";                                                                 // 2002\n                                                                                                                       // 2003\n    var inputs = args.shift(); // first argument                                                                       // 2004\n    var outputs = args.pop(); // last argument                                                                         // 2005\n    var layers = args; // all the arguments in the middle                                                              // 2006\n                                                                                                                       // 2007\n    var input = new Layer(inputs);                                                                                     // 2008\n    var hidden = [];                                                                                                   // 2009\n    var output = new Layer(outputs);                                                                                   // 2010\n                                                                                                                       // 2011\n    var previous = input;                                                                                              // 2012\n                                                                                                                       // 2013\n    // generate hidden layers                                                                                          // 2014\n    for (level in layers) {                                                                                            // 2015\n      var size = layers[level];                                                                                        // 2016\n      var layer = new Layer(size);                                                                                     // 2017\n      hidden.push(layer);                                                                                              // 2018\n      previous.project(layer);                                                                                         // 2019\n      previous = layer;                                                                                                // 2020\n    }                                                                                                                  // 2021\n    previous.project(output);                                                                                          // 2022\n                                                                                                                       // 2023\n    // set layers of the neural network                                                                                // 2024\n    this.set({                                                                                                         // 2025\n      input: input,                                                                                                    // 2026\n      hidden: hidden,                                                                                                  // 2027\n      output: output                                                                                                   // 2028\n    });                                                                                                                // 2029\n                                                                                                                       // 2030\n    // trainer for the network                                                                                         // 2031\n    this.trainer = new Trainer(this);                                                                                  // 2032\n  },                                                                                                                   // 2033\n                                                                                                                       // 2034\n  // Multilayer Long Short-Term Memory                                                                                 // 2035\n  LSTM: function LSTM() {                                                                                              // 2036\n                                                                                                                       // 2037\n    var args = Array.prototype.slice.call(arguments); // convert arguments to array                                    // 2038\n    if (args.length < 3)                                                                                               // 2039\n      throw \"Error: not enough layers (minimum 3) !!\";                                                                 // 2040\n                                                                                                                       // 2041\n    var inputs = args.shift();                                                                                         // 2042\n    var outputs = args.pop();                                                                                          // 2043\n    var layers = args;                                                                                                 // 2044\n                                                                                                                       // 2045\n    var inputLayer = new Layer(inputs);                                                                                // 2046\n    var hiddenLayers = [];                                                                                             // 2047\n    var outputLayer = new Layer(outputs);                                                                              // 2048\n                                                                                                                       // 2049\n    var previous = null;                                                                                               // 2050\n                                                                                                                       // 2051\n    // generate layers                                                                                                 // 2052\n    for (var layer in layers) {                                                                                        // 2053\n      // generate memory blocks (memory cell and respective gates)                                                     // 2054\n      var size = layers[layer];                                                                                        // 2055\n                                                                                                                       // 2056\n      var inputGate = new Layer(size).set({                                                                            // 2057\n        bias: 1                                                                                                        // 2058\n      });                                                                                                              // 2059\n      var forgetGate = new Layer(size).set({                                                                           // 2060\n        bias: 1                                                                                                        // 2061\n      });                                                                                                              // 2062\n      var memoryCell = new Layer(size);                                                                                // 2063\n      var outputGate = new Layer(size).set({                                                                           // 2064\n        bias: 1                                                                                                        // 2065\n      });                                                                                                              // 2066\n                                                                                                                       // 2067\n      hiddenLayers.push(inputGate);                                                                                    // 2068\n      hiddenLayers.push(forgetGate);                                                                                   // 2069\n      hiddenLayers.push(memoryCell);                                                                                   // 2070\n      hiddenLayers.push(outputGate);                                                                                   // 2071\n                                                                                                                       // 2072\n      // connections from input layer                                                                                  // 2073\n      var input = inputLayer.project(memoryCell);                                                                      // 2074\n      inputLayer.project(inputGate);                                                                                   // 2075\n      inputLayer.project(forgetGate);                                                                                  // 2076\n      inputLayer.project(outputGate);                                                                                  // 2077\n                                                                                                                       // 2078\n      // connections from previous memory-block layer to this one                                                      // 2079\n      if (previous != null) {                                                                                          // 2080\n        var cell = previous.project(memoryCell);                                                                       // 2081\n        previous.project(inputGate);                                                                                   // 2082\n        previous.project(forgetGate);                                                                                  // 2083\n        previous.project(outputGate);                                                                                  // 2084\n      }                                                                                                                // 2085\n                                                                                                                       // 2086\n      // connections from memory cell                                                                                  // 2087\n      var output = memoryCell.project(outputLayer);                                                                    // 2088\n                                                                                                                       // 2089\n      // self-connection                                                                                               // 2090\n      var self = memoryCell.project(memoryCell, Layer.connectionType.ONE_TO_ONE);                                      // 2091\n                                                                                                                       // 2092\n      // peepholes                                                                                                     // 2093\n      memoryCell.project(inputGate, Layer.connectionType.ONE_TO_ONE);                                                  // 2094\n      memoryCell.project(forgetGate, Layer.connectionType.ONE_TO_ONE);                                                 // 2095\n      memoryCell.project(outputGate, Layer.connectionType.ONE_TO_ONE);                                                 // 2096\n                                                                                                                       // 2097\n      // gates                                                                                                         // 2098\n      inputGate.gate(input, Layer.gateType.INPUT);                                                                     // 2099\n      forgetGate.gate(self, Layer.gateType.ONE_TO_ONE);                                                                // 2100\n      outputGate.gate(output, Layer.gateType.OUTPUT);                                                                  // 2101\n      if (previous != null)                                                                                            // 2102\n        inputGate.gate(cell, Layer.gateType.INPUT);                                                                    // 2103\n                                                                                                                       // 2104\n      previous = memoryCell;                                                                                           // 2105\n    }                                                                                                                  // 2106\n                                                                                                                       // 2107\n    // input to output direct connection                                                                               // 2108\n    inputLayer.project(outputLayer);                                                                                   // 2109\n                                                                                                                       // 2110\n    // set the layers of the neural network                                                                            // 2111\n    this.set({                                                                                                         // 2112\n      input: inputLayer,                                                                                               // 2113\n      hidden: hiddenLayers,                                                                                            // 2114\n      output: outputLayer                                                                                              // 2115\n    });                                                                                                                // 2116\n                                                                                                                       // 2117\n    // trainer                                                                                                         // 2118\n    this.trainer = new Trainer(this);                                                                                  // 2119\n  },                                                                                                                   // 2120\n                                                                                                                       // 2121\n  // Liquid State Machine                                                                                              // 2122\n  Liquid: function Liquid(inputs, hidden, outputs, connections, gates) {                                               // 2123\n                                                                                                                       // 2124\n    // create layers                                                                                                   // 2125\n    var inputLayer = new Layer(inputs);                                                                                // 2126\n    var hiddenLayer = new Layer(hidden);                                                                               // 2127\n    var outputLayer = new Layer(outputs);                                                                              // 2128\n                                                                                                                       // 2129\n    // make connections and gates randomly among the neurons                                                           // 2130\n    var neurons = hiddenLayer.neurons();                                                                               // 2131\n    var connectionList = [];                                                                                           // 2132\n                                                                                                                       // 2133\n    for (var i = 0; i < connections; i++) {                                                                            // 2134\n      // connect two random neurons                                                                                    // 2135\n      var from = Math.random() * neurons.length | 0;                                                                   // 2136\n      var to = Math.random() * neurons.length | 0;                                                                     // 2137\n      var connection = neurons[from].project(neurons[to]);                                                             // 2138\n      connectionList.push(connection);                                                                                 // 2139\n    }                                                                                                                  // 2140\n                                                                                                                       // 2141\n    for (var j = 0; j < gates; j++) {                                                                                  // 2142\n      // pick a random gater neuron                                                                                    // 2143\n      var gater = Math.random() * neurons.length | 0;                                                                  // 2144\n      // pick a random connection to gate                                                                              // 2145\n      var connection = Math.random() * connectionList.length | 0;                                                      // 2146\n      // let the gater gate the connection                                                                             // 2147\n      neurons[gater].gate(connectionList[connection]);                                                                 // 2148\n    }                                                                                                                  // 2149\n                                                                                                                       // 2150\n    // connect the layers                                                                                              // 2151\n    inputLayer.project(hiddenLayer);                                                                                   // 2152\n    hiddenLayer.project(outputLayer);                                                                                  // 2153\n                                                                                                                       // 2154\n    // set the layers of the network                                                                                   // 2155\n    this.set({                                                                                                         // 2156\n      input: inputLayer,                                                                                               // 2157\n      hidden: [hiddenLayer],                                                                                           // 2158\n      output: outputLayer                                                                                              // 2159\n    });                                                                                                                // 2160\n                                                                                                                       // 2161\n    // trainer                                                                                                         // 2162\n    this.trainer = new Trainer(this);                                                                                  // 2163\n  }                                                                                                                    // 2164\n}                                                                                                                      // 2165\n                                                                                                                       // 2166\n// Extend prototype chain (so every architectures is an instance of Network)                                           // 2167\nfor (var architecture in Architect) {                                                                                  // 2168\n  Architect[architecture].prototype = new Network();                                                                   // 2169\n  Architect[architecture].prototype.constructor = Architect[architecture];                                             // 2170\n}                                                                                                                      // 2171\n                                                                                                                       // 2172\n                                                                                                                       // 2173\n/*******************************************************************************************                           // 2174\n                                         EXPORT                                                                        // 2175\n*******************************************************************************************/                           // 2176\n                                                                                                                       // 2177\n(function(global) {                                                                                                    // 2178\n  var API = {                                                                                                          // 2179\n    Neuron: Neuron,                                                                                                    // 2180\n    Layer: Layer,                                                                                                      // 2181\n    Network: Network,                                                                                                  // 2182\n    Trainer: Trainer,                                                                                                  // 2183\n    Architect: Architect                                                                                               // 2184\n  }                                                                                                                    // 2185\n  if (global.define && global.define.amd) {                                                                            // 2186\n    define([], API);                                                                                                   // 2187\n  } else if (typeof exports !== \"undefined\") {                                                                         // 2188\n    module.exports = API;                                                                                              // 2189\n  } else {                                                                                                             // 2190\n    global.Synaptic = API;                                                                                             // 2191\n    Synaptic.ninja = function() {                                                                                      // 2192\n      delete global.Synaptic;                                                                                          // 2193\n    }                                                                                                                  // 2194\n  }                                                                                                                    // 2195\n})(this);                                                                                                              // 2196\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 2206\n}).call(this);                                                       // 2207\n                                                                     // 2208\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['steeve:synaptic'] = {}, {\n  Neuron: Neuron,\n  Layer: Layer,\n  Network: Network,\n  Trainer: Trainer,\n  Architect: Architect\n});\n\n})();\n","servePath":"/packages/steeve_synaptic.js"}]